
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package javacup;

import java.util.ArrayList;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.*;
import Clases.*;
import java.util.Arrays;
import java.util.List;
import Utilidades.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\240\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\003\000\002\004\004\000\002\004\003\000\002" +
    "\004\004\000\002\004\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\004\000\002" +
    "\004\004\000\002\004\003\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\003" +
    "\000\002\076\004\000\002\014\004\000\002\014\004\000" +
    "\002\012\010\000\002\012\006\000\002\013\005\000\002" +
    "\017\003\000\002\017\004\000\002\033\014\000\002\067" +
    "\010\000\002\070\010\000\002\032\014\000\002\032\016" +
    "\000\002\053\003\000\002\055\003\000\002\056\005\000" +
    "\002\056\003\000\002\054\005\000\002\054\003\000\002" +
    "\057\005\000\002\052\010\000\002\073\013\000\002\011" +
    "\006\000\002\015\007\000\002\015\011\000\002\015\011" +
    "\000\002\026\007\000\002\035\004\000\002\035\003\000" +
    "\002\035\003\000\002\034\004\000\002\034\003\000\002" +
    "\030\007\000\002\027\007\000\002\020\007\000\002\025" +
    "\010\000\002\022\013\000\002\031\003\000\002\031\003" +
    "\000\002\023\005\000\002\016\005\000\002\021\003\000" +
    "\002\024\003\000\002\007\003\000\002\007\003\000\002" +
    "\074\007\000\002\074\010\000\002\074\007\000\002\074" +
    "\010\000\002\060\005\000\002\060\003\000\002\043\004" +
    "\000\002\075\006\000\002\075\005\000\002\061\005\000" +
    "\002\061\003\000\002\077\007\000\002\063\004\000\002" +
    "\063\003\000\002\100\006\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\101\010\000\002\065\005\000" +
    "\002\064\005\000\002\064\003\000\002\102\005\000\002" +
    "\102\005\000\002\103\007\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\036\003\000\002" +
    "\036\003\000\002\036\003\000\002\036\003\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\040\005\000\002\040\005\000\002\040\005\000\002" +
    "\040\005\000\002\040\005\000\002\040\005\000\002\044" +
    "\005\000\002\044\005\000\002\044\005\000\002\044\005" +
    "\000\002\044\005\000\002\044\005\000\002\045\005\000" +
    "\002\045\005\000\002\045\005\000\002\046\004\000\002" +
    "\046\004\000\002\046\005\000\002\046\006\000\002\041" +
    "\006\000\002\041\011\000\002\041\010\000\002\042\006" +
    "\000\002\042\006\000\002\042\006\000\002\042\010\000" +
    "\002\037\004\000\002\037\004\000\002\050\006\000\002" +
    "\050\005\000\002\062\005\000\002\062\003\000\002\051" +
    "\005\000\002\051\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u015e\000\056\003\043\005\020\006\011\007\014\010" +
    "\065\013\017\014\030\027\010\035\050\051\035\066\061" +
    "\076\023\077\024\101\025\102\060\103\026\104\067\105" +
    "\042\106\045\107\034\110\041\111\055\001\002\000\004" +
    "\040\u0160\001\002\000\062\002\uffe7\003\uffe7\005\uffe7\006" +
    "\uffe7\007\uffe7\010\uffe7\013\uffe7\014\uffe7\027\uffe7\035\uffe7" +
    "\047\uffe7\051\uffe7\066\uffe7\076\uffe7\077\uffe7\101\uffe7\102" +
    "\uffe7\103\uffe7\104\uffe7\105\uffe7\106\uffe7\107\uffe7\110\uffe7" +
    "\111\uffe7\001\002\000\004\040\u015f\001\002\000\004\051" +
    "\u0158\001\002\000\004\051\uffb5\001\002\000\016\025\uff98" +
    "\040\uff98\043\uff98\045\uff98\051\uff98\055\uff98\001\002\000" +
    "\060\002\000\003\043\005\020\006\011\007\014\010\065" +
    "\013\017\014\030\027\010\035\050\051\035\066\061\076" +
    "\023\077\024\101\025\102\060\103\026\104\067\105\042" +
    "\106\045\107\034\110\041\111\055\001\002\000\004\040" +
    "\u0157\001\002\000\016\025\uff97\040\uff97\043\uff97\045\uff97" +
    "\051\uff97\055\uff97\001\002\000\004\040\u0156\001\002\000" +
    "\004\040\u0155\001\002\000\016\025\uff96\040\uff96\043\uff96" +
    "\045\uff96\051\uff96\055\uff96\001\002\000\004\044\u0152\001" +
    "\002\000\004\002\u0151\001\002\000\004\051\u0128\001\002" +
    "\000\004\044\u0121\001\002\000\004\044\u0113\001\002\000" +
    "\034\012\075\033\077\034\076\044\114\051\104\052\101" +
    "\053\115\054\113\062\111\063\117\070\107\071\121\072" +
    "\105\001\002\000\036\012\075\033\077\034\076\040\uffdb" +
    "\044\114\051\104\052\101\053\115\054\113\062\111\063" +
    "\117\070\107\071\121\072\105\001\002\000\004\040\376" +
    "\001\002\000\016\025\uff95\040\uff95\043\uff95\045\uff95\051" +
    "\uff95\055\uff95\001\002\000\004\040\375\001\002\000\004" +
    "\040\374\001\002\000\062\002\ufff8\003\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\013\ufff8\014\ufff8\027\ufff8\035\ufff8" +
    "\047\ufff8\051\ufff8\066\ufff8\076\ufff8\077\ufff8\101\ufff8\102" +
    "\ufff8\103\ufff8\104\ufff8\105\ufff8\106\ufff8\107\ufff8\110\ufff8" +
    "\111\ufff8\001\002\000\004\051\360\001\002\000\016\025" +
    "\330\044\316\055\327\057\326\074\332\075\331\001\002" +
    "\000\062\002\ufffe\003\ufffe\005\ufffe\006\ufffe\007\ufffe\010" +
    "\ufffe\013\ufffe\014\ufffe\027\ufffe\035\ufffe\047\ufffe\051\ufffe" +
    "\066\ufffe\076\ufffe\077\ufffe\101\ufffe\102\ufffe\103\ufffe\104" +
    "\ufffe\105\ufffe\106\ufffe\107\ufffe\110\ufffe\111\ufffe\001\002" +
    "\000\062\002\ufff2\003\ufff2\005\ufff2\006\ufff2\007\ufff2\010" +
    "\ufff2\013\ufff2\014\ufff2\027\ufff2\035\ufff2\047\ufff2\051\ufff2" +
    "\066\ufff2\076\ufff2\077\ufff2\101\ufff2\102\ufff2\103\ufff2\104" +
    "\ufff2\105\ufff2\106\ufff2\107\ufff2\110\ufff2\111\ufff2\001\002" +
    "\000\004\040\325\001\002\000\004\051\314\001\002\000" +
    "\004\040\uffb8\001\002\000\064\002\uffe2\003\uffe2\005\uffe2" +
    "\006\uffe2\007\uffe2\010\uffe2\013\uffe2\014\uffe2\027\uffe2\035" +
    "\uffe2\040\313\047\uffe2\051\uffe2\066\uffe2\076\uffe2\077\uffe2" +
    "\101\uffe2\102\uffe2\103\uffe2\104\uffe2\105\uffe2\106\uffe2\107" +
    "\uffe2\110\uffe2\111\uffe2\001\002\000\004\040\312\001\002" +
    "\000\004\040\uffb7\001\002\000\004\040\311\001\002\000" +
    "\004\040\310\001\002\000\016\025\uff94\040\uff94\043\uff94" +
    "\045\uff94\051\uff94\055\uff94\001\002\000\004\040\307\001" +
    "\002\000\062\002\ufff6\003\ufff6\005\ufff6\006\ufff6\007\ufff6" +
    "\010\ufff6\013\ufff6\014\ufff6\027\ufff6\035\ufff6\047\ufff6\051" +
    "\ufff6\066\ufff6\076\ufff6\077\ufff6\101\ufff6\102\ufff6\103\ufff6" +
    "\104\ufff6\105\ufff6\106\ufff6\107\ufff6\110\ufff6\111\ufff6\001" +
    "\002\000\004\040\306\001\002\000\004\040\305\001\002" +
    "\000\004\046\265\001\002\000\004\040\264\001\002\000" +
    "\004\040\263\001\002\000\004\044\257\001\002\000\004" +
    "\042\246\001\002\000\004\040\245\001\002\000\004\040" +
    "\244\001\002\000\004\040\243\001\002\000\004\051\uffb6" +
    "\001\002\000\004\040\242\001\002\000\004\046\071\001" +
    "\002\000\062\002\ufff3\003\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\013\ufff3\014\ufff3\027\ufff3\035\ufff3\047\ufff3\051" +
    "\ufff3\066\ufff3\076\ufff3\077\ufff3\101\ufff3\102\ufff3\103\ufff3" +
    "\104\ufff3\105\ufff3\106\ufff3\107\ufff3\110\ufff3\111\ufff3\001" +
    "\002\000\056\003\043\005\020\006\011\007\014\010\065" +
    "\013\017\014\030\027\010\035\050\051\035\066\061\076" +
    "\023\077\024\101\025\102\060\103\026\104\067\105\042" +
    "\106\045\107\034\110\041\111\055\001\002\000\004\102" +
    "\073\001\002\000\004\044\074\001\002\000\034\012\075" +
    "\033\077\034\076\044\114\051\104\052\101\053\115\054" +
    "\113\062\111\063\117\070\107\071\121\072\105\001\002" +
    "\000\034\012\075\033\077\034\076\044\114\051\104\052" +
    "\101\053\115\054\113\062\111\063\117\070\107\071\121" +
    "\072\105\001\002\000\056\004\uff88\011\uff88\012\uff88\015" +
    "\uff88\016\uff88\017\uff88\020\uff88\021\uff88\022\uff88\023\uff88" +
    "\024\uff88\030\uff88\031\uff88\032\uff88\040\uff88\042\uff88\043" +
    "\uff88\045\uff88\046\uff88\047\uff88\056\uff88\064\uff88\001\002" +
    "\000\034\012\075\033\077\034\076\044\114\051\104\052" +
    "\101\053\115\054\113\062\111\063\117\070\107\071\121" +
    "\072\105\001\002\000\056\004\uff93\011\uff93\012\uff93\015" +
    "\uff93\016\uff93\017\uff93\020\uff93\021\uff93\022\uff93\023\uff93" +
    "\024\uff93\030\uff93\031\uff93\032\uff93\040\uff93\042\uff93\043" +
    "\uff93\045\uff93\046\uff93\047\uff93\056\uff93\064\uff93\001\002" +
    "\000\056\004\uff86\011\uff86\012\uff86\015\uff86\016\uff86\017" +
    "\uff86\020\uff86\021\uff86\022\uff86\023\uff86\024\uff86\030\uff86" +
    "\031\uff86\032\uff86\040\uff86\042\uff86\043\uff86\045\uff86\046" +
    "\uff86\047\uff86\056\uff86\064\uff86\001\002\000\056\004\uff90" +
    "\011\uff90\012\uff90\015\uff90\016\uff90\017\uff90\020\uff90\021" +
    "\uff90\022\uff90\023\uff90\024\uff90\030\uff90\031\uff90\032\uff90" +
    "\040\uff90\042\uff90\043\uff90\045\uff90\046\uff90\047\uff90\056" +
    "\uff90\064\uff90\001\002\000\056\004\uff8e\011\uff8e\012\uff8e" +
    "\015\uff8e\016\uff8e\017\uff8e\020\uff8e\021\uff8e\022\uff8e\023" +
    "\uff8e\024\uff8e\030\uff8e\031\uff8e\032\uff8e\040\uff8e\042\uff8e" +
    "\043\uff8e\045\uff8e\046\uff8e\047\uff8e\056\uff8e\064\uff8e\001" +
    "\002\000\070\004\uff89\011\uff89\012\uff89\015\uff89\016\uff89" +
    "\017\uff89\020\uff89\021\uff89\022\uff89\023\uff89\024\uff89\030" +
    "\uff89\031\uff89\032\uff89\040\uff89\042\uff89\043\uff89\044\202" +
    "\045\uff89\046\uff89\047\uff89\055\203\056\uff89\057\201\064" +
    "\uff89\074\205\075\204\001\002\000\004\044\176\001\002" +
    "\000\056\004\uff8b\011\uff8b\012\uff8b\015\uff8b\016\uff8b\017" +
    "\uff8b\020\uff8b\021\uff8b\022\uff8b\023\uff8b\024\uff8b\030\uff8b" +
    "\031\uff8b\032\uff8b\040\uff8b\042\uff8b\043\uff8b\045\uff8b\046" +
    "\uff8b\047\uff8b\056\uff8b\064\uff8b\001\002\000\004\044\173" +
    "\001\002\000\056\004\uff8f\011\uff8f\012\uff8f\015\uff8f\016" +
    "\uff8f\017\uff8f\020\uff8f\021\uff8f\022\uff8f\023\uff8f\024\uff8f" +
    "\030\uff8f\031\uff8f\032\uff8f\040\uff8f\042\uff8f\043\uff8f\045" +
    "\uff8f\046\uff8f\047\uff8f\056\uff8f\064\uff8f\001\002\000\056" +
    "\004\uff8a\011\uff8a\012\uff8a\015\uff8a\016\uff8a\017\uff8a\020" +
    "\uff8a\021\uff8a\022\uff8a\023\uff8a\024\uff8a\030\uff8a\031\uff8a" +
    "\032\uff8a\040\uff8a\042\uff8a\043\uff8a\045\uff8a\046\uff8a\047" +
    "\uff8a\056\uff8a\064\uff8a\001\002\000\056\004\uff8c\011\uff8c" +
    "\012\uff8c\015\uff8c\016\uff8c\017\uff8c\020\uff8c\021\uff8c\022" +
    "\uff8c\023\uff8c\024\uff8c\030\uff8c\031\uff8c\032\uff8c\040\uff8c" +
    "\042\uff8c\043\uff8c\045\uff8c\046\uff8c\047\uff8c\056\uff8c\064" +
    "\uff8c\001\002\000\056\004\uff84\011\uff84\012\uff84\015\uff84" +
    "\016\uff84\017\uff84\020\uff84\021\uff84\022\uff84\023\uff84\024" +
    "\uff84\030\uff84\031\uff84\032\uff84\040\uff84\042\uff84\043\uff84" +
    "\045\uff84\046\uff84\047\uff84\056\uff84\064\uff84\001\002\000" +
    "\046\006\011\007\014\012\075\013\017\014\030\033\077" +
    "\034\076\035\050\044\114\051\104\052\101\053\115\054" +
    "\113\062\111\063\117\070\107\071\121\072\105\001\002" +
    "\000\056\004\uff85\011\uff85\012\uff85\015\uff85\016\uff85\017" +
    "\uff85\020\uff85\021\uff85\022\uff85\023\uff85\024\uff85\030\uff85" +
    "\031\uff85\032\uff85\040\uff85\042\uff85\043\uff85\045\uff85\046" +
    "\uff85\047\uff85\056\uff85\064\uff85\001\002\000\056\004\uff8d" +
    "\011\uff8d\012\uff8d\015\uff8d\016\uff8d\017\uff8d\020\uff8d\021" +
    "\uff8d\022\uff8d\023\uff8d\024\uff8d\030\uff8d\031\uff8d\032\uff8d" +
    "\040\uff8d\042\uff8d\043\uff8d\045\uff8d\046\uff8d\047\uff8d\056" +
    "\uff8d\064\uff8d\001\002\000\056\004\uff87\011\uff87\012\uff87" +
    "\015\uff87\016\uff87\017\uff87\020\uff87\021\uff87\022\uff87\023" +
    "\uff87\024\uff87\030\uff87\031\uff87\032\uff87\040\uff87\042\uff87" +
    "\043\uff87\045\uff87\046\uff87\047\uff87\056\uff87\064\uff87\001" +
    "\002\000\056\004\uff91\011\uff91\012\uff91\015\uff91\016\uff91" +
    "\017\uff91\020\uff91\021\uff91\022\uff91\023\uff91\024\uff91\030" +
    "\uff91\031\uff91\032\uff91\040\uff91\042\uff91\043\uff91\045\uff91" +
    "\046\uff91\047\uff91\056\uff91\064\uff91\001\002\000\004\044" +
    "\163\001\002\000\056\004\uff92\011\uff92\012\uff92\015\uff92" +
    "\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92\023\uff92\024" +
    "\uff92\030\uff92\031\uff92\032\uff92\040\uff92\042\uff92\043\uff92" +
    "\045\uff92\046\uff92\047\uff92\056\uff92\064\uff92\001\002\000" +
    "\042\011\131\012\127\015\132\016\140\017\141\020\125" +
    "\021\134\022\136\023\130\024\135\030\143\031\124\032" +
    "\126\042\133\043\142\045\137\001\002\000\034\012\075" +
    "\033\077\034\076\044\114\051\104\052\101\053\115\054" +
    "\113\062\111\063\117\070\107\071\121\072\105\001\002" +
    "\000\034\012\075\033\077\034\076\044\114\051\104\052" +
    "\101\053\115\054\113\062\111\063\117\070\107\071\121" +
    "\072\105\001\002\000\034\012\075\033\077\034\076\044" +
    "\114\051\104\052\101\053\115\054\113\062\111\063\117" +
    "\070\107\071\121\072\105\001\002\000\034\012\075\033" +
    "\077\034\076\044\114\051\104\052\101\053\115\054\113" +
    "\062\111\063\117\070\107\071\121\072\105\001\002\000" +
    "\034\012\075\033\077\034\076\044\114\051\104\052\101" +
    "\053\115\054\113\062\111\063\117\070\107\071\121\072" +
    "\105\001\002\000\034\012\075\033\077\034\076\044\114" +
    "\051\104\052\101\053\115\054\113\062\111\063\117\070" +
    "\107\071\121\072\105\001\002\000\034\012\075\033\077" +
    "\034\076\044\114\051\104\052\101\053\115\054\113\062" +
    "\111\063\117\070\107\071\121\072\105\001\002\000\034" +
    "\012\075\033\077\034\076\044\114\051\104\052\101\053" +
    "\115\054\113\062\111\063\117\070\107\071\121\072\105" +
    "\001\002\000\034\012\075\033\077\034\076\044\114\051" +
    "\104\052\101\053\115\054\113\062\111\063\117\070\107" +
    "\071\121\072\105\001\002\000\034\012\075\033\077\034" +
    "\076\044\114\051\104\052\101\053\115\054\113\062\111" +
    "\063\117\070\107\071\121\072\105\001\002\000\034\012" +
    "\075\033\077\034\076\044\114\051\104\052\101\053\115" +
    "\054\113\062\111\063\117\070\107\071\121\072\105\001" +
    "\002\000\004\040\uffbe\001\002\000\034\012\075\033\077" +
    "\034\076\044\114\051\104\052\101\053\115\054\113\062" +
    "\111\063\117\070\107\071\121\072\105\001\002\000\034" +
    "\012\075\033\077\034\076\044\114\051\104\052\101\053" +
    "\115\054\113\062\111\063\117\070\107\071\121\072\105" +
    "\001\002\000\034\012\075\033\077\034\076\044\114\051" +
    "\104\052\101\053\115\054\113\062\111\063\117\070\107" +
    "\071\121\072\105\001\002\000\034\012\075\033\077\034" +
    "\076\044\114\051\104\052\101\053\115\054\113\062\111" +
    "\063\117\070\107\071\121\072\105\001\002\000\056\004" +
    "\uff75\011\131\012\127\015\132\016\140\017\141\020\125" +
    "\021\134\022\136\023\130\024\135\030\uff75\031\124\032" +
    "\126\040\uff75\042\133\043\142\045\uff75\046\uff75\047\uff75" +
    "\056\uff75\064\uff75\001\002\000\056\004\uff7a\011\131\012" +
    "\127\015\132\016\uff7a\017\uff7a\020\uff7a\021\uff7a\022\136" +
    "\023\130\024\135\030\uff7a\031\uff7a\032\uff7a\040\uff7a\042" +
    "\uff7a\043\uff7a\045\uff7a\046\uff7a\047\uff7a\056\uff7a\064\uff7a" +
    "\001\002\000\056\004\uff7c\011\131\012\127\015\132\016" +
    "\uff7c\017\uff7c\020\uff7c\021\uff7c\022\136\023\130\024\135" +
    "\030\uff7c\031\uff7c\032\uff7c\040\uff7c\042\uff7c\043\uff7c\045" +
    "\uff7c\046\uff7c\047\uff7c\056\uff7c\064\uff7c\001\002\000\056" +
    "\004\uff7d\011\131\012\127\015\132\016\uff7d\017\uff7d\020" +
    "\uff7d\021\uff7d\022\136\023\130\024\135\030\uff7d\031\uff7d" +
    "\032\uff7d\040\uff7d\042\uff7d\043\uff7d\045\uff7d\046\uff7d\047" +
    "\uff7d\056\uff7d\064\uff7d\001\002\000\056\004\uff7f\011\uff7f" +
    "\012\uff7f\015\uff7f\016\uff7f\017\uff7f\020\uff7f\021\uff7f\022" +
    "\uff7f\023\130\024\uff7f\030\uff7f\031\uff7f\032\uff7f\040\uff7f" +
    "\042\uff7f\043\uff7f\045\uff7f\046\uff7f\047\uff7f\056\uff7f\064" +
    "\uff7f\001\002\000\056\004\uff83\011\uff83\012\uff83\015\uff83" +
    "\016\uff83\017\uff83\020\uff83\021\uff83\022\uff83\023\130\024" +
    "\uff83\030\uff83\031\uff83\032\uff83\040\uff83\042\uff83\043\uff83" +
    "\045\uff83\046\uff83\047\uff83\056\uff83\064\uff83\001\002\000" +
    "\056\004\uff79\011\131\012\127\015\132\016\uff79\017\uff79" +
    "\020\uff79\021\uff79\022\136\023\130\024\135\030\uff79\031" +
    "\uff79\032\uff79\040\uff79\042\uff79\043\uff79\045\uff79\046\uff79" +
    "\047\uff79\056\uff79\064\uff79\001\002\000\056\004\uff7b\011" +
    "\131\012\127\015\132\016\uff7b\017\uff7b\020\uff7b\021\uff7b" +
    "\022\136\023\130\024\135\030\uff7b\031\uff7b\032\uff7b\040" +
    "\uff7b\042\uff7b\043\uff7b\045\uff7b\046\uff7b\047\uff7b\056\uff7b" +
    "\064\uff7b\001\002\000\056\004\uff80\011\uff80\012\uff80\015" +
    "\uff80\016\uff80\017\uff80\020\uff80\021\uff80\022\uff80\023\130" +
    "\024\uff80\030\uff80\031\uff80\032\uff80\040\uff80\042\uff80\043" +
    "\uff80\045\uff80\046\uff80\047\uff80\056\uff80\064\uff80\001\002" +
    "\000\056\004\uff82\011\uff82\012\uff82\015\132\016\uff82\017" +
    "\uff82\020\uff82\021\uff82\022\136\023\130\024\135\030\uff82" +
    "\031\uff82\032\uff82\040\uff82\042\uff82\043\uff82\045\uff82\046" +
    "\uff82\047\uff82\056\uff82\064\uff82\001\002\000\054\004\uff7e" +
    "\011\uff7e\012\uff7e\015\uff7e\016\uff7e\017\uff7e\020\uff7e\021" +
    "\uff7e\022\uff7e\024\uff7e\030\uff7e\031\uff7e\032\uff7e\040\uff7e" +
    "\042\uff7e\043\uff7e\045\uff7e\046\uff7e\047\uff7e\056\uff7e\064" +
    "\uff7e\001\002\000\056\004\uff81\011\uff81\012\uff81\015\132" +
    "\016\uff81\017\uff81\020\uff81\021\uff81\022\136\023\130\024" +
    "\135\030\uff81\031\uff81\032\uff81\040\uff81\042\uff81\043\uff81" +
    "\045\uff81\046\uff81\047\uff81\056\uff81\064\uff81\001\002\000" +
    "\056\004\uff76\011\131\012\127\015\132\016\140\017\141" +
    "\020\125\021\134\022\136\023\130\024\135\030\uff76\031" +
    "\uff76\032\uff76\040\uff76\042\133\043\142\045\uff76\046\uff76" +
    "\047\uff76\056\uff76\064\uff76\001\002\000\056\004\uff78\011" +
    "\131\012\127\015\132\016\uff78\017\uff78\020\uff78\021\uff78" +
    "\022\136\023\130\024\135\030\uff78\031\uff78\032\uff78\040" +
    "\uff78\042\uff78\043\uff78\045\uff78\046\uff78\047\uff78\056\uff78" +
    "\064\uff78\001\002\000\056\004\uff77\011\131\012\127\015" +
    "\132\016\140\017\141\020\125\021\134\022\136\023\130" +
    "\024\135\030\uff77\031\uff77\032\126\040\uff77\042\133\043" +
    "\142\045\uff77\046\uff77\047\uff77\056\uff77\064\uff77\001\002" +
    "\000\034\012\075\033\077\034\076\044\114\051\104\052" +
    "\101\053\115\054\113\062\111\063\117\070\107\071\121" +
    "\072\105\001\002\000\042\011\131\012\127\015\132\016" +
    "\140\017\141\020\125\021\134\022\136\023\130\024\135" +
    "\030\143\031\124\032\126\042\133\043\142\045\165\001" +
    "\002\000\056\004\uff6c\011\uff6c\012\uff6c\015\uff6c\016\uff6c" +
    "\017\uff6c\020\uff6c\021\uff6c\022\uff6c\023\uff6c\024\uff6c\030" +
    "\uff6c\031\uff6c\032\uff6c\040\uff6c\042\uff6c\043\uff6c\045\uff6c" +
    "\046\uff6c\047\uff6c\056\uff6c\064\uff6c\001\002\000\004\045" +
    "\171\001\002\000\042\011\131\012\127\015\132\016\140" +
    "\017\141\020\125\021\134\022\136\023\130\024\135\030" +
    "\143\031\124\032\126\042\133\043\142\045\170\001\002" +
    "\000\056\004\uff72\011\uff72\012\uff72\015\uff72\016\uff72\017" +
    "\uff72\020\uff72\021\uff72\022\uff72\023\uff72\024\uff72\030\uff72" +
    "\031\uff72\032\uff72\040\uff72\042\uff72\043\uff72\045\uff72\046" +
    "\uff72\047\uff72\056\uff72\064\uff72\001\002\000\034\012\075" +
    "\033\077\034\076\044\114\051\104\052\101\053\115\054" +
    "\113\062\111\063\117\070\107\071\121\072\105\001\002" +
    "\000\056\004\uff71\011\uff71\012\uff71\015\uff71\016\uff71\017" +
    "\uff71\020\uff71\021\uff71\022\uff71\023\uff71\024\uff71\030\uff71" +
    "\031\uff71\032\uff71\040\uff71\042\uff71\043\uff71\045\uff71\046" +
    "\uff71\047\uff71\056\uff71\064\uff71\001\002\000\034\012\075" +
    "\033\077\034\076\044\114\051\104\052\101\053\115\054" +
    "\113\062\111\063\117\070\107\071\121\072\105\001\002" +
    "\000\042\011\131\012\127\015\132\016\140\017\141\020" +
    "\125\021\134\022\136\023\130\024\135\030\143\031\124" +
    "\032\126\042\133\043\142\045\175\001\002\000\056\004" +
    "\uff6d\011\uff6d\012\uff6d\015\uff6d\016\uff6d\017\uff6d\020\uff6d" +
    "\021\uff6d\022\uff6d\023\uff6d\024\uff6d\030\uff6d\031\uff6d\032" +
    "\uff6d\040\uff6d\042\uff6d\043\uff6d\045\uff6d\046\uff6d\047\uff6d" +
    "\056\uff6d\064\uff6d\001\002\000\034\012\075\033\077\034" +
    "\076\044\114\051\104\052\101\053\115\054\113\062\111" +
    "\063\117\070\107\071\121\072\105\001\002\000\042\011" +
    "\131\012\127\015\132\016\140\017\141\020\125\021\134" +
    "\022\136\023\130\024\135\030\143\031\124\032\126\042" +
    "\133\043\142\045\200\001\002\000\056\004\uff6b\011\uff6b" +
    "\012\uff6b\015\uff6b\016\uff6b\017\uff6b\020\uff6b\021\uff6b\022" +
    "\uff6b\023\uff6b\024\uff6b\030\uff6b\031\uff6b\032\uff6b\040\uff6b" +
    "\042\uff6b\043\uff6b\045\uff6b\046\uff6b\047\uff6b\056\uff6b\064" +
    "\uff6b\001\002\000\010\051\222\060\224\073\223\001\002" +
    "\000\036\012\075\033\077\034\076\044\114\045\215\051" +
    "\104\052\101\053\115\054\113\062\111\063\117\070\107" +
    "\071\121\072\105\001\002\000\034\012\075\033\077\034" +
    "\076\044\114\051\104\052\101\053\115\054\113\062\111" +
    "\063\117\070\107\071\121\072\105\001\002\000\056\004" +
    "\uff69\011\uff69\012\uff69\015\uff69\016\uff69\017\uff69\020\uff69" +
    "\021\uff69\022\uff69\023\uff69\024\uff69\030\uff69\031\uff69\032" +
    "\uff69\040\uff69\042\uff69\043\uff69\045\uff69\046\uff69\047\uff69" +
    "\056\uff69\064\uff69\001\002\000\056\004\uff68\011\uff68\012" +
    "\uff68\015\uff68\016\uff68\017\uff68\020\uff68\021\uff68\022\uff68" +
    "\023\uff68\024\uff68\030\uff68\031\uff68\032\uff68\040\uff68\042" +
    "\uff68\043\uff68\045\uff68\046\uff68\047\uff68\056\uff68\064\uff68" +
    "\001\002\000\042\011\131\012\127\015\132\016\140\017" +
    "\141\020\125\021\134\022\136\023\130\024\135\030\143" +
    "\031\124\032\126\042\133\043\142\056\207\001\002\000" +
    "\060\004\uff70\011\uff70\012\uff70\015\uff70\016\uff70\017\uff70" +
    "\020\uff70\021\uff70\022\uff70\023\uff70\024\uff70\030\uff70\031" +
    "\uff70\032\uff70\040\uff70\042\uff70\043\uff70\045\uff70\046\uff70" +
    "\047\uff70\055\210\056\uff70\064\uff70\001\002\000\034\012" +
    "\075\033\077\034\076\044\114\051\104\052\101\053\115" +
    "\054\113\062\111\063\117\070\107\071\121\072\105\001" +
    "\002\000\042\011\131\012\127\015\132\016\140\017\141" +
    "\020\125\021\134\022\136\023\130\024\135\030\143\031" +
    "\124\032\126\042\133\043\142\056\212\001\002\000\056" +
    "\004\uff6f\011\uff6f\012\uff6f\015\uff6f\016\uff6f\017\uff6f\020" +
    "\uff6f\021\uff6f\022\uff6f\023\uff6f\024\uff6f\030\uff6f\031\uff6f" +
    "\032\uff6f\040\uff6f\042\uff6f\043\uff6f\045\uff6f\046\uff6f\047" +
    "\uff6f\056\uff6f\064\uff6f\001\002\000\004\004\220\001\002" +
    "\000\004\045\217\001\002\000\056\004\uff66\011\uff66\012" +
    "\uff66\015\uff66\016\uff66\017\uff66\020\uff66\021\uff66\022\uff66" +
    "\023\uff66\024\uff66\030\uff66\031\uff66\032\uff66\040\uff66\042" +
    "\uff66\043\uff66\045\uff66\046\uff66\047\uff66\056\uff66\064\uff66" +
    "\001\002\000\044\004\uffaa\011\131\012\127\015\132\016" +
    "\140\017\141\020\125\021\134\022\136\023\130\024\135" +
    "\030\143\031\124\032\126\042\133\043\142\045\uff64\001" +
    "\002\000\056\004\uff67\011\uff67\012\uff67\015\uff67\016\uff67" +
    "\017\uff67\020\uff67\021\uff67\022\uff67\023\uff67\024\uff67\030" +
    "\uff67\031\uff67\032\uff67\040\uff67\042\uff67\043\uff67\045\uff67" +
    "\046\uff67\047\uff67\056\uff67\064\uff67\001\002\000\034\012" +
    "\075\033\077\034\076\044\114\051\104\052\101\053\115" +
    "\054\113\062\111\063\117\070\107\071\121\072\105\001" +
    "\002\000\044\004\uffab\011\131\012\127\015\132\016\140" +
    "\017\141\020\125\021\134\022\136\023\130\024\135\030" +
    "\143\031\124\032\126\042\133\043\142\045\uff65\001\002" +
    "\000\060\004\uff63\011\uff63\012\uff63\015\uff63\016\uff63\017" +
    "\uff63\020\uff63\021\uff63\022\uff63\023\uff63\024\uff63\030\uff63" +
    "\031\uff63\032\uff63\040\uff63\042\uff63\043\uff63\045\uff63\046" +
    "\uff63\047\uff63\056\uff63\057\233\064\uff63\001\002\000\004" +
    "\044\230\001\002\000\004\044\225\001\002\000\034\012" +
    "\075\033\077\034\076\044\114\051\104\052\101\053\115" +
    "\054\113\062\111\063\117\070\107\071\121\072\105\001" +
    "\002\000\042\011\131\012\127\015\132\016\140\017\141" +
    "\020\125\021\134\022\136\023\130\024\135\030\143\031" +
    "\124\032\126\042\133\043\142\045\227\001\002\000\056" +
    "\004\uff6e\011\uff6e\012\uff6e\015\uff6e\016\uff6e\017\uff6e\020" +
    "\uff6e\021\uff6e\022\uff6e\023\uff6e\024\uff6e\030\uff6e\031\uff6e" +
    "\032\uff6e\040\uff6e\042\uff6e\043\uff6e\045\uff6e\046\uff6e\047" +
    "\uff6e\056\uff6e\064\uff6e\001\002\000\034\012\075\033\077" +
    "\034\076\044\114\051\104\052\101\053\115\054\113\062" +
    "\111\063\117\070\107\071\121\072\105\001\002\000\042" +
    "\011\131\012\127\015\132\016\140\017\141\020\125\021" +
    "\134\022\136\023\130\024\135\030\143\031\124\032\126" +
    "\042\133\043\142\045\232\001\002\000\056\004\uff6a\011" +
    "\uff6a\012\uff6a\015\uff6a\016\uff6a\017\uff6a\020\uff6a\021\uff6a" +
    "\022\uff6a\023\uff6a\024\uff6a\030\uff6a\031\uff6a\032\uff6a\040" +
    "\uff6a\042\uff6a\043\uff6a\045\uff6a\046\uff6a\047\uff6a\056\uff6a" +
    "\064\uff6a\001\002\000\004\051\234\001\002\000\056\004" +
    "\uff62\011\uff62\012\uff62\015\uff62\016\uff62\017\uff62\020\uff62" +
    "\021\uff62\022\uff62\023\uff62\024\uff62\030\uff62\031\uff62\032" +
    "\uff62\040\uff62\042\uff62\043\uff62\045\uff62\046\uff62\047\uff62" +
    "\056\uff62\064\uff62\001\002\000\056\004\uff74\011\131\012" +
    "\127\015\132\016\140\017\141\020\125\021\134\022\136" +
    "\023\130\024\135\030\uff74\031\uff74\032\uff74\040\uff74\042" +
    "\133\043\142\045\uff74\046\uff74\047\uff74\056\uff74\064\uff74" +
    "\001\002\000\056\004\uff73\011\uff73\012\uff73\015\uff73\016" +
    "\uff73\017\uff73\020\uff73\021\uff73\022\uff73\023\uff73\024\uff73" +
    "\030\uff73\031\uff73\032\uff73\040\uff73\042\uff73\043\uff73\045" +
    "\uff73\046\uff73\047\uff73\056\uff73\064\uff73\001\002\000\060" +
    "\003\043\005\020\006\011\007\014\010\065\013\017\014" +
    "\030\027\010\035\050\047\241\051\035\066\061\076\023" +
    "\077\024\101\025\102\060\103\026\104\067\105\042\106" +
    "\045\107\034\110\041\111\055\001\002\000\062\002\uffff" +
    "\003\uffff\005\uffff\006\uffff\007\uffff\010\uffff\013\uffff\014" +
    "\uffff\027\uffff\035\uffff\047\uffff\051\uffff\066\uffff\076\uffff" +
    "\077\uffff\101\uffff\102\uffff\103\uffff\104\uffff\105\uffff\106" +
    "\uffff\107\uffff\110\uffff\111\uffff\001\002\000\064\002\uffb9" +
    "\003\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\013\uffb9\014" +
    "\uffb9\027\uffb9\035\uffb9\047\uffb9\051\uffb9\066\uffb9\076\uffb9" +
    "\077\uffb9\100\uffb9\101\uffb9\102\uffb9\103\uffb9\104\uffb9\105" +
    "\uffb9\106\uffb9\107\uffb9\110\uffb9\111\uffb9\001\002\000\062" +
    "\002\ufff0\003\ufff0\005\ufff0\006\ufff0\007\ufff0\010\ufff0\013" +
    "\ufff0\014\ufff0\027\ufff0\035\ufff0\047\ufff0\051\ufff0\066\ufff0" +
    "\076\ufff0\077\ufff0\101\ufff0\102\ufff0\103\ufff0\104\ufff0\105" +
    "\ufff0\106\ufff0\107\ufff0\110\ufff0\111\ufff0\001\002\000\062" +
    "\002\uffea\003\uffea\005\uffea\006\uffea\007\uffea\010\uffea\013" +
    "\uffea\014\uffea\027\uffea\035\uffea\047\uffea\051\uffea\066\uffea" +
    "\076\uffea\077\uffea\101\uffea\102\uffea\103\uffea\104\uffea\105" +
    "\uffea\106\uffea\107\uffea\110\uffea\111\uffea\001\002\000\062" +
    "\002\uffe5\003\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5\013" +
    "\uffe5\014\uffe5\027\uffe5\035\uffe5\047\uffe5\051\uffe5\066\uffe5" +
    "\076\uffe5\077\uffe5\101\uffe5\102\uffe5\103\uffe5\104\uffe5\105" +
    "\uffe5\106\uffe5\107\uffe5\110\uffe5\111\uffe5\001\002\000\062" +
    "\002\ufff9\003\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9\013" +
    "\ufff9\014\ufff9\027\ufff9\035\ufff9\047\ufff9\051\ufff9\066\ufff9" +
    "\076\ufff9\077\ufff9\101\ufff9\102\ufff9\103\ufff9\104\ufff9\105" +
    "\ufff9\106\ufff9\107\ufff9\110\ufff9\111\ufff9\001\002\000\014" +
    "\006\011\007\014\013\017\014\030\035\050\001\002\000" +
    "\004\043\250\001\002\000\004\051\251\001\002\000\004" +
    "\025\252\001\002\000\004\067\253\001\002\000\004\066" +
    "\254\001\002\000\004\044\255\001\002\000\004\045\256" +
    "\001\002\000\004\040\uffd9\001\002\000\034\012\075\033" +
    "\077\034\076\044\114\051\104\052\101\053\115\054\113" +
    "\062\111\063\117\070\107\071\121\072\105\001\002\000" +
    "\042\011\131\012\127\015\132\016\140\017\141\020\125" +
    "\021\134\022\136\023\130\024\135\030\143\031\124\032" +
    "\126\042\133\043\142\045\261\001\002\000\004\046\071" +
    "\001\002\000\062\002\uffbf\003\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\013\uffbf\014\uffbf\027\uffbf\035\uffbf\047\uffbf" +
    "\051\uffbf\066\uffbf\076\uffbf\077\uffbf\101\uffbf\102\uffbf\103" +
    "\uffbf\104\uffbf\105\uffbf\106\uffbf\107\uffbf\110\uffbf\111\uffbf" +
    "\001\002\000\062\002\uffee\003\uffee\005\uffee\006\uffee\007" +
    "\uffee\010\uffee\013\uffee\014\uffee\027\uffee\035\uffee\047\uffee" +
    "\051\uffee\066\uffee\076\uffee\077\uffee\101\uffee\102\uffee\103" +
    "\uffee\104\uffee\105\uffee\106\uffee\107\uffee\110\uffee\111\uffee" +
    "\001\002\000\062\002\uffec\003\uffec\005\uffec\006\uffec\007" +
    "\uffec\010\uffec\013\uffec\014\uffec\027\uffec\035\uffec\047\uffec" +
    "\051\uffec\066\uffec\076\uffec\077\uffec\101\uffec\102\uffec\103" +
    "\uffec\104\uffec\105\uffec\106\uffec\107\uffec\110\uffec\111\uffec" +
    "\001\002\000\004\051\266\001\002\000\004\041\274\001" +
    "\002\000\006\047\uffa7\051\uffa7\001\002\000\006\047\272" +
    "\051\266\001\002\000\006\047\uffa8\051\uffa8\001\002\000" +
    "\004\051\273\001\002\000\004\040\uffa9\001\002\000\016" +
    "\006\302\007\276\013\303\014\300\035\277\051\275\001" +
    "\002\000\004\040\uffa0\001\002\000\004\040\uffa4\001\002" +
    "\000\004\040\uffa1\001\002\000\004\040\uffa2\001\002\000" +
    "\004\040\304\001\002\000\004\040\uffa5\001\002\000\004" +
    "\040\uffa3\001\002\000\006\047\uffa6\051\uffa6\001\002\000" +
    "\062\002\uffe9\003\uffe9\005\uffe9\006\uffe9\007\uffe9\010\uffe9" +
    "\013\uffe9\014\uffe9\027\uffe9\035\uffe9\047\uffe9\051\uffe9\066" +
    "\uffe9\076\uffe9\077\uffe9\101\uffe9\102\uffe9\103\uffe9\104\uffe9" +
    "\105\uffe9\106\uffe9\107\uffe9\110\uffe9\111\uffe9\001\002\000" +
    "\062\002\ufffd\003\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd" +
    "\013\ufffd\014\ufffd\027\ufffd\035\ufffd\047\ufffd\051\ufffd\066" +
    "\ufffd\076\ufffd\077\ufffd\101\ufffd\102\ufffd\103\ufffd\104\ufffd" +
    "\105\ufffd\106\ufffd\107\ufffd\110\ufffd\111\ufffd\001\002\000" +
    "\062\002\ufffa\003\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa" +
    "\013\ufffa\014\ufffa\027\ufffa\035\ufffa\047\ufffa\051\ufffa\066" +
    "\ufffa\076\ufffa\077\ufffa\101\ufffa\102\ufffa\103\ufffa\104\ufffa" +
    "\105\ufffa\106\ufffa\107\ufffa\110\ufffa\111\ufffa\001\002\000" +
    "\062\002\ufff5\003\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5" +
    "\013\ufff5\014\ufff5\027\ufff5\035\ufff5\047\ufff5\051\ufff5\066" +
    "\ufff5\076\ufff5\077\ufff5\101\ufff5\102\ufff5\103\ufff5\104\ufff5" +
    "\105\ufff5\106\ufff5\107\ufff5\110\ufff5\111\ufff5\001\002\000" +
    "\062\002\ufffc\003\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\013\ufffc\014\ufffc\027\ufffc\035\ufffc\047\ufffc\051\ufffc\066" +
    "\ufffc\076\ufffc\077\ufffc\101\ufffc\102\ufffc\103\ufffc\104\ufffc" +
    "\105\ufffc\106\ufffc\107\ufffc\110\ufffc\111\ufffc\001\002\000" +
    "\062\002\uffe4\003\uffe4\005\uffe4\006\uffe4\007\uffe4\010\uffe4" +
    "\013\uffe4\014\uffe4\027\uffe4\035\uffe4\047\uffe4\051\uffe4\066" +
    "\uffe4\076\uffe4\077\uffe4\101\uffe4\102\uffe4\103\uffe4\104\uffe4" +
    "\105\uffe4\106\uffe4\107\uffe4\110\uffe4\111\uffe4\001\002\000" +
    "\062\002\uffe3\003\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3" +
    "\013\uffe3\014\uffe3\027\uffe3\035\uffe3\047\uffe3\051\uffe3\066" +
    "\uffe3\076\uffe3\077\uffe3\101\uffe3\102\uffe3\103\uffe3\104\uffe3" +
    "\105\uffe3\106\uffe3\107\uffe3\110\uffe3\111\uffe3\001\002\000" +
    "\004\044\316\001\002\000\004\040\uffe1\001\002\000\036" +
    "\012\075\033\077\034\076\044\114\045\320\051\104\052" +
    "\101\053\115\054\113\062\111\063\117\070\107\071\121" +
    "\072\105\001\002\000\006\004\322\045\323\001\002\000" +
    "\004\040\uffac\001\002\000\044\004\uffaa\011\131\012\127" +
    "\015\132\016\140\017\141\020\125\021\134\022\136\023" +
    "\130\024\135\030\143\031\124\032\126\042\133\043\142" +
    "\045\uffaa\001\002\000\034\012\075\033\077\034\076\044" +
    "\114\051\104\052\101\053\115\054\113\062\111\063\117" +
    "\070\107\071\121\072\105\001\002\000\004\040\uffad\001" +
    "\002\000\044\004\uffab\011\131\012\127\015\132\016\140" +
    "\017\141\020\125\021\134\022\136\023\130\024\135\030" +
    "\143\031\124\032\126\042\133\043\142\045\uffab\001\002" +
    "\000\062\002\ufffb\003\ufffb\005\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\013\ufffb\014\ufffb\027\ufffb\035\ufffb\047\ufffb\051\ufffb" +
    "\066\ufffb\076\ufffb\077\ufffb\101\ufffb\102\ufffb\103\ufffb\104" +
    "\ufffb\105\ufffb\106\ufffb\107\ufffb\110\ufffb\111\ufffb\001\002" +
    "\000\010\051\345\060\347\061\346\001\002\000\034\012" +
    "\075\033\077\034\076\044\114\051\104\052\101\053\115" +
    "\054\113\062\111\063\117\070\107\071\121\072\105\001" +
    "\002\000\034\012\075\033\077\034\076\044\114\051\104" +
    "\052\101\053\115\054\113\062\111\063\117\070\107\071" +
    "\121\072\105\001\002\000\006\040\uffe0\045\uffe0\001\002" +
    "\000\006\040\uffdf\045\uffdf\001\002\000\044\011\131\012" +
    "\127\015\132\016\140\017\141\020\125\021\134\022\136" +
    "\023\130\024\135\030\143\031\124\032\126\040\uffdc\042" +
    "\133\043\142\045\uffdc\001\002\000\042\011\131\012\127" +
    "\015\132\016\140\017\141\020\125\021\134\022\136\023" +
    "\130\024\135\030\143\031\124\032\126\042\133\043\142" +
    "\056\335\001\002\000\006\025\337\055\336\001\002\000" +
    "\034\012\075\033\077\034\076\044\114\051\104\052\101" +
    "\053\115\054\113\062\111\063\117\070\107\071\121\072" +
    "\105\001\002\000\034\012\075\033\077\034\076\044\114" +
    "\051\104\052\101\053\115\054\113\062\111\063\117\070" +
    "\107\071\121\072\105\001\002\000\042\011\131\012\127" +
    "\015\132\016\140\017\141\020\125\021\134\022\136\023" +
    "\130\024\135\030\143\031\124\032\126\040\uffcd\042\133" +
    "\043\142\001\002\000\042\011\131\012\127\015\132\016" +
    "\140\017\141\020\125\021\134\022\136\023\130\024\135" +
    "\030\143\031\124\032\126\042\133\043\142\056\342\001" +
    "\002\000\004\025\343\001\002\000\034\012\075\033\077" +
    "\034\076\044\114\051\104\052\101\053\115\054\113\062" +
    "\111\063\117\070\107\071\121\072\105\001\002\000\042" +
    "\011\131\012\127\015\132\016\140\017\141\020\125\021" +
    "\134\022\136\023\130\024\135\030\143\031\124\032\126" +
    "\040\uffcc\042\133\043\142\001\002\000\004\025\356\001" +
    "\002\000\004\044\353\001\002\000\004\044\350\001\002" +
    "\000\034\012\075\033\077\034\076\044\114\051\104\052" +
    "\101\053\115\054\113\062\111\063\117\070\107\071\121" +
    "\072\105\001\002\000\042\011\131\012\127\015\132\016" +
    "\140\017\141\020\125\021\134\022\136\023\130\024\135" +
    "\030\143\031\124\032\126\042\133\043\142\045\352\001" +
    "\002\000\004\040\uffd7\001\002\000\034\012\075\033\077" +
    "\034\076\044\114\051\104\052\101\053\115\054\113\062" +
    "\111\063\117\070\107\071\121\072\105\001\002\000\042" +
    "\011\131\012\127\015\132\016\140\017\141\020\125\021" +
    "\134\022\136\023\130\024\135\030\143\031\124\032\126" +
    "\042\133\043\142\045\355\001\002\000\004\040\uffd8\001" +
    "\002\000\034\012\075\033\077\034\076\044\114\051\104" +
    "\052\101\053\115\054\113\062\111\063\117\070\107\071" +
    "\121\072\105\001\002\000\042\011\131\012\127\015\132" +
    "\016\140\017\141\020\125\021\134\022\136\023\130\024" +
    "\135\030\143\031\124\032\126\040\uff99\042\133\043\142" +
    "\001\002\000\004\044\361\001\002\000\016\006\011\007" +
    "\014\013\017\014\030\035\050\045\363\001\002\000\004" +
    "\051\373\001\002\000\004\046\071\001\002\000\006\004" +
    "\366\045\367\001\002\000\006\004\uffaf\045\uffaf\001\002" +
    "\000\014\006\011\007\014\013\017\014\030\035\050\001" +
    "\002\000\004\046\071\001\002\000\062\002\uffb1\003\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\010\uffb1\013\uffb1\014\uffb1\027" +
    "\uffb1\035\uffb1\047\uffb1\051\uffb1\066\uffb1\076\uffb1\077\uffb1" +
    "\101\uffb1\102\uffb1\103\uffb1\104\uffb1\105\uffb1\106\uffb1\107" +
    "\uffb1\110\uffb1\111\uffb1\001\002\000\006\004\uffb0\045\uffb0" +
    "\001\002\000\062\002\uffb2\003\uffb2\005\uffb2\006\uffb2\007" +
    "\uffb2\010\uffb2\013\uffb2\014\uffb2\027\uffb2\035\uffb2\047\uffb2" +
    "\051\uffb2\066\uffb2\076\uffb2\077\uffb2\101\uffb2\102\uffb2\103" +
    "\uffb2\104\uffb2\105\uffb2\106\uffb2\107\uffb2\110\uffb2\111\uffb2" +
    "\001\002\000\006\004\uffae\045\uffae\001\002\000\062\002" +
    "\ufff7\003\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\013\ufff7" +
    "\014\ufff7\027\ufff7\035\ufff7\047\ufff7\051\ufff7\066\ufff7\076" +
    "\ufff7\077\ufff7\101\ufff7\102\ufff7\103\ufff7\104\ufff7\105\ufff7" +
    "\106\ufff7\107\ufff7\110\ufff7\111\ufff7\001\002\000\062\002" +
    "\uffe6\003\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\013\uffe6" +
    "\014\uffe6\027\uffe6\035\uffe6\047\uffe6\051\uffe6\066\uffe6\076" +
    "\uffe6\077\uffe6\101\uffe6\102\uffe6\103\uffe6\104\uffe6\105\uffe6" +
    "\106\uffe6\107\uffe6\110\uffe6\111\uffe6\001\002\000\062\002" +
    "\uffe8\003\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\013\uffe8" +
    "\014\uffe8\027\uffe8\035\uffe8\047\uffe8\051\uffe8\066\uffe8\076" +
    "\uffe8\077\uffe8\101\uffe8\102\uffe8\103\uffe8\104\uffe8\105\uffe8" +
    "\106\uffe8\107\uffe8\110\uffe8\111\uffe8\001\002\000\042\011" +
    "\131\012\127\015\132\016\140\017\141\020\125\021\134" +
    "\022\136\023\130\024\135\030\143\031\124\032\126\040" +
    "\uffda\042\133\043\142\001\002\000\042\011\131\012\127" +
    "\015\132\016\140\017\141\020\125\021\134\022\136\023" +
    "\130\024\135\030\143\031\124\032\126\042\133\043\142" +
    "\046\u0101\001\002\000\036\012\075\033\077\034\076\044" +
    "\114\051\104\052\101\053\115\054\113\062\111\063\117" +
    "\065\u0106\070\107\071\121\072\105\001\002\000\004\047" +
    "\u0112\001\002\000\040\012\075\033\077\034\076\044\114" +
    "\047\uffc5\051\104\052\101\053\115\054\113\062\111\063" +
    "\117\065\u0106\070\107\071\121\072\105\001\002\000\004" +
    "\047\uffc4\001\002\000\040\012\uffc2\033\uffc2\034\uffc2\044" +
    "\uffc2\047\uffc2\051\uffc2\052\uffc2\053\uffc2\054\uffc2\062\uffc2" +
    "\063\uffc2\065\uffc2\070\uffc2\071\uffc2\072\uffc2\001\002\000" +
    "\004\064\u010c\001\002\000\042\011\131\012\127\015\132" +
    "\016\140\017\141\020\125\021\134\022\136\023\130\024" +
    "\135\030\143\031\124\032\126\042\133\043\142\064\u0108" +
    "\001\002\000\004\046\u0109\001\002\000\056\003\043\005" +
    "\020\006\011\007\014\010\065\013\017\014\030\027\010" +
    "\035\050\051\035\066\061\076\023\077\024\101\025\102" +
    "\060\103\026\104\067\105\042\106\045\107\034\110\041" +
    "\111\055\001\002\000\060\003\043\005\020\006\011\007" +
    "\014\010\065\013\017\014\030\027\010\035\050\047\u010b" +
    "\051\035\066\061\076\023\077\024\101\025\102\060\103" +
    "\026\104\067\105\042\106\045\107\034\110\041\111\055" +
    "\001\002\000\040\012\uffc1\033\uffc1\034\uffc1\044\uffc1\047" +
    "\uffc1\051\uffc1\052\uffc1\053\uffc1\054\uffc1\062\uffc1\063\uffc1" +
    "\065\uffc1\070\uffc1\071\uffc1\072\uffc1\001\002\000\004\046" +
    "\u010d\001\002\000\056\003\043\005\020\006\011\007\014" +
    "\010\065\013\017\014\030\027\010\035\050\051\035\066" +
    "\061\076\023\077\024\101\025\102\060\103\026\104\067" +
    "\105\042\106\045\107\034\110\041\111\055\001\002\000" +
    "\060\003\043\005\020\006\011\007\014\010\065\013\017" +
    "\014\030\027\010\035\050\047\u010f\051\035\066\061\076" +
    "\023\077\024\101\025\102\060\103\026\104\067\105\042" +
    "\106\045\107\034\110\041\111\055\001\002\000\004\047" +
    "\uffc0\001\002\000\004\047\uffc6\001\002\000\040\012\uffc3" +
    "\033\uffc3\034\uffc3\044\uffc3\047\uffc3\051\uffc3\052\uffc3\053" +
    "\uffc3\054\uffc3\062\uffc3\063\uffc3\065\uffc3\070\uffc3\071\uffc3" +
    "\072\uffc3\001\002\000\062\002\uffc7\003\uffc7\005\uffc7\006" +
    "\uffc7\007\uffc7\010\uffc7\013\uffc7\014\uffc7\027\uffc7\035\uffc7" +
    "\047\uffc7\051\uffc7\066\uffc7\076\uffc7\077\uffc7\101\uffc7\102" +
    "\uffc7\103\uffc7\104\uffc7\105\uffc7\106\uffc7\107\uffc7\110\uffc7" +
    "\111\uffc7\001\002\000\004\051\u0114\001\002\000\004\025" +
    "\u011f\001\002\000\004\040\u0116\001\002\000\034\012\075" +
    "\033\077\034\076\044\114\051\104\052\101\053\115\054" +
    "\113\062\111\063\117\070\107\071\121\072\105\001\002" +
    "\000\042\011\131\012\127\015\132\016\140\017\141\020" +
    "\125\021\134\022\136\023\130\024\135\030\143\031\124" +
    "\032\126\040\u0118\042\133\043\142\001\002\000\004\051" +
    "\u011a\001\002\000\004\045\uffbb\001\002\000\010\025\330" +
    "\074\332\075\331\001\002\000\004\045\uffbc\001\002\000" +
    "\004\045\u011d\001\002\000\004\046\071\001\002\000\062" +
    "\002\uffbd\003\uffbd\005\uffbd\006\uffbd\007\uffbd\010\uffbd\013" +
    "\uffbd\014\uffbd\027\uffbd\035\uffbd\047\uffbd\051\uffbd\066\uffbd" +
    "\076\uffbd\077\uffbd\101\uffbd\102\uffbd\103\uffbd\104\uffbd\105" +
    "\uffbd\106\uffbd\107\uffbd\110\uffbd\111\uffbd\001\002\000\034" +
    "\012\075\033\077\034\076\044\114\051\104\052\101\053" +
    "\115\054\113\062\111\063\117\070\107\071\121\072\105" +
    "\001\002\000\042\011\131\012\127\015\132\016\140\017" +
    "\141\020\125\021\134\022\136\023\130\024\135\030\143" +
    "\031\124\032\126\040\uffba\042\133\043\142\001\002\000" +
    "\034\012\075\033\077\034\076\044\114\051\104\052\101" +
    "\053\115\054\113\062\111\063\117\070\107\071\121\072" +
    "\105\001\002\000\042\011\131\012\127\015\132\016\140" +
    "\017\141\020\125\021\134\022\136\023\130\024\135\030" +
    "\143\031\124\032\126\042\133\043\142\045\u0123\001\002" +
    "\000\004\046\071\001\002\000\064\002\uffca\003\uffca\005" +
    "\uffca\006\uffca\007\uffca\010\uffca\013\uffca\014\uffca\027\uffca" +
    "\035\uffca\047\uffca\051\uffca\066\uffca\076\uffca\077\uffca\100" +
    "\u0125\101\uffca\102\uffca\103\uffca\104\uffca\105\uffca\106\uffca" +
    "\107\uffca\110\uffca\111\uffca\001\002\000\006\046\071\076" +
    "\023\001\002\000\062\002\uffc9\003\uffc9\005\uffc9\006\uffc9" +
    "\007\uffc9\010\uffc9\013\uffc9\014\uffc9\027\uffc9\035\uffc9\047" +
    "\uffc9\051\uffc9\066\uffc9\076\uffc9\077\uffc9\101\uffc9\102\uffc9" +
    "\103\uffc9\104\uffc9\105\uffc9\106\uffc9\107\uffc9\110\uffc9\111" +
    "\uffc9\001\002\000\062\002\uffc8\003\uffc8\005\uffc8\006\uffc8" +
    "\007\uffc8\010\uffc8\013\uffc8\014\uffc8\027\uffc8\035\uffc8\047" +
    "\uffc8\051\uffc8\066\uffc8\076\uffc8\077\uffc8\101\uffc8\102\uffc8" +
    "\103\uffc8\104\uffc8\105\uffc8\106\uffc8\107\uffc8\110\uffc8\111" +
    "\uffc8\001\002\000\004\041\u0129\001\002\000\016\006\011" +
    "\007\014\013\017\014\030\035\050\051\u012a\001\002\000" +
    "\004\025\u0145\001\002\000\010\025\u012d\040\uffdd\055\u012c" +
    "\001\002\000\004\056\u012f\001\002\000\034\012\075\033" +
    "\077\034\076\044\114\051\104\052\101\053\115\054\113" +
    "\062\111\063\117\070\107\071\121\072\105\001\002\000" +
    "\042\011\131\012\127\015\132\016\140\017\141\020\125" +
    "\021\134\022\136\023\130\024\135\030\143\031\124\032" +
    "\126\040\uffde\042\133\043\142\001\002\000\006\025\u0131" +
    "\055\u0130\001\002\000\004\056\u0139\001\002\000\004\055" +
    "\u0132\001\002\000\034\012\075\033\077\034\076\044\114" +
    "\051\104\052\101\053\115\054\113\062\111\063\117\070" +
    "\107\071\121\072\105\001\002\000\004\056\u0138\001\002" +
    "\000\006\004\u0136\056\uffd4\001\002\000\044\004\uffcf\011" +
    "\131\012\127\015\132\016\140\017\141\020\125\021\134" +
    "\022\136\023\130\024\135\030\143\031\124\032\126\042" +
    "\133\043\142\056\uffcf\001\002\000\034\012\075\033\077" +
    "\034\076\044\114\051\104\052\101\053\115\054\113\062" +
    "\111\063\117\070\107\071\121\072\105\001\002\000\044" +
    "\004\uffd0\011\131\012\127\015\132\016\140\017\141\020" +
    "\125\021\134\022\136\023\130\024\135\030\143\031\124" +
    "\032\126\042\133\043\142\056\uffd0\001\002\000\004\040" +
    "\uffd6\001\002\000\004\025\u013a\001\002\000\004\055\u013b" +
    "\001\002\000\004\055\u013e\001\002\000\004\056\u0144\001" +
    "\002\000\006\004\uffd1\056\uffd1\001\002\000\034\012\075" +
    "\033\077\034\076\044\114\051\104\052\101\053\115\054" +
    "\113\062\111\063\117\070\107\071\121\072\105\001\002" +
    "\000\006\004\u0140\056\uffd3\001\002\000\004\055\u013e\001" +
    "\002\000\006\004\uffd2\056\uffd2\001\002\000\004\056\u0143" +
    "\001\002\000\006\004\uffce\056\uffce\001\002\000\004\040" +
    "\uffd5\001\002\000\004\046\u0146\001\002\000\004\051\u0148" +
    "\001\002\000\004\040\uff9f\001\002\000\004\041\u014e\001" +
    "\002\000\006\004\u014b\047\u014c\001\002\000\006\004\uff9c" +
    "\047\uff9c\001\002\000\004\051\u0148\001\002\000\010\004" +
    "\uff9e\040\uff9e\047\uff9e\001\002\000\006\004\uff9d\047\uff9d" +
    "\001\002\000\036\012\075\033\077\034\076\044\114\046" +
    "\u0146\051\104\052\101\053\115\054\113\062\111\063\117" +
    "\070\107\071\121\072\105\001\002\000\006\004\uff9a\047" +
    "\uff9a\001\002\000\044\004\uff9b\011\131\012\127\015\132" +
    "\016\140\017\141\020\125\021\134\022\136\023\130\024" +
    "\135\030\143\031\124\032\126\042\133\043\142\047\uff9b" +
    "\001\002\000\004\002\001\001\002\000\034\012\075\033" +
    "\077\034\076\044\114\051\104\052\101\053\115\054\113" +
    "\062\111\063\117\070\107\071\121\072\105\001\002\000" +
    "\042\011\131\012\127\015\132\016\140\017\141\020\125" +
    "\021\134\022\136\023\130\024\135\030\143\031\124\032" +
    "\126\042\133\043\142\045\u0154\001\002\000\004\040\uffcb" +
    "\001\002\000\062\002\uffed\003\uffed\005\uffed\006\uffed\007" +
    "\uffed\010\uffed\013\uffed\014\uffed\027\uffed\035\uffed\047\uffed" +
    "\051\uffed\066\uffed\076\uffed\077\uffed\101\uffed\102\uffed\103" +
    "\uffed\104\uffed\105\uffed\106\uffed\107\uffed\110\uffed\111\uffed" +
    "\001\002\000\062\002\ufff4\003\ufff4\005\ufff4\006\ufff4\007" +
    "\ufff4\010\ufff4\013\ufff4\014\ufff4\027\ufff4\035\ufff4\047\ufff4" +
    "\051\ufff4\066\ufff4\076\ufff4\077\ufff4\101\ufff4\102\ufff4\103" +
    "\ufff4\104\ufff4\105\ufff4\106\ufff4\107\ufff4\110\ufff4\111\ufff4" +
    "\001\002\000\062\002\ufff1\003\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\010\ufff1\013\ufff1\014\ufff1\027\ufff1\035\ufff1\047\ufff1" +
    "\051\ufff1\066\ufff1\076\ufff1\077\ufff1\101\ufff1\102\ufff1\103" +
    "\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1\110\ufff1\111\ufff1" +
    "\001\002\000\004\044\u0159\001\002\000\016\006\011\007" +
    "\014\013\017\014\030\035\050\045\u015a\001\002\000\004" +
    "\046\071\001\002\000\006\004\366\045\u015c\001\002\000" +
    "\004\046\071\001\002\000\062\002\uffb3\003\uffb3\005\uffb3" +
    "\006\uffb3\007\uffb3\010\uffb3\013\uffb3\014\uffb3\027\uffb3\035" +
    "\uffb3\047\uffb3\051\uffb3\066\uffb3\076\uffb3\077\uffb3\101\uffb3" +
    "\102\uffb3\103\uffb3\104\uffb3\105\uffb3\106\uffb3\107\uffb3\110" +
    "\uffb3\111\uffb3\001\002\000\062\002\uffb4\003\uffb4\005\uffb4" +
    "\006\uffb4\007\uffb4\010\uffb4\013\uffb4\014\uffb4\027\uffb4\035" +
    "\uffb4\047\uffb4\051\uffb4\066\uffb4\076\uffb4\077\uffb4\101\uffb4" +
    "\102\uffb4\103\uffb4\104\uffb4\105\uffb4\106\uffb4\107\uffb4\110" +
    "\uffb4\111\uffb4\001\002\000\062\002\uffef\003\uffef\005\uffef" +
    "\006\uffef\007\uffef\010\uffef\013\uffef\014\uffef\027\uffef\035" +
    "\uffef\047\uffef\051\uffef\066\uffef\076\uffef\077\uffef\101\uffef" +
    "\102\uffef\103\uffef\104\uffef\105\uffef\106\uffef\107\uffef\110" +
    "\uffef\111\uffef\001\002\000\062\002\uffeb\003\uffeb\005\uffeb" +
    "\006\uffeb\007\uffeb\010\uffeb\013\uffeb\014\uffeb\027\uffeb\035" +
    "\uffeb\047\uffeb\051\uffeb\066\uffeb\076\uffeb\077\uffeb\101\uffeb" +
    "\102\uffeb\103\uffeb\104\uffeb\105\uffeb\106\uffeb\107\uffeb\110" +
    "\uffeb\111\uffeb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u015e\000\100\002\020\003\011\004\035\005\006\007" +
    "\021\011\065\012\052\013\050\014\061\015\032\017\037" +
    "\020\036\021\046\022\051\024\014\025\012\026\067\032" +
    "\005\033\015\052\056\067\063\070\053\071\003\072\055" +
    "\073\026\074\004\075\031\076\045\077\030\101\062\103" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\074\004\237\005\006\007\021\011\065\012\052" +
    "\013\050\014\061\015\032\017\037\020\036\021\046\022" +
    "\051\024\014\025\012\026\067\032\005\033\015\052\056" +
    "\067\063\070\053\071\003\072\055\073\026\074\004\075" +
    "\031\076\045\077\030\101\062\103\043\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\036\377\037\077\040\121\041\117\042\101\044\107" +
    "\045\102\046\115\050\111\051\105\001\001\000\026\036" +
    "\376\037\077\040\121\041\117\042\101\044\107\045\102" +
    "\046\115\050\111\051\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\075\314" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\016\071\001" +
    "\001\000\002\001\001\000\076\003\236\004\035\005\006" +
    "\007\021\011\065\012\052\013\050\014\061\015\032\017" +
    "\037\020\036\021\046\022\051\024\014\025\012\026\067" +
    "\032\005\033\015\052\056\067\063\070\053\071\003\072" +
    "\055\073\026\074\004\075\031\076\045\077\030\101\062" +
    "\103\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\036\122\037\077\040\121\041\117\042\101\044\107" +
    "\045\102\046\115\050\111\051\105\001\001\000\026\036" +
    "\235\037\077\040\121\041\117\042\101\044\107\045\102" +
    "\046\115\050\111\051\105\001\001\000\002\001\001\000" +
    "\026\036\234\037\077\040\121\041\117\042\101\044\107" +
    "\045\102\046\115\050\111\051\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\165\036\166\037" +
    "\077\040\121\041\117\042\101\044\107\045\102\046\115" +
    "\050\111\051\105\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\036\161\037" +
    "\077\040\121\041\117\042\101\044\107\045\102\046\115" +
    "\050\111\051\105\001\001\000\026\036\160\037\077\040" +
    "\121\041\117\042\101\044\107\045\102\046\115\050\111" +
    "\051\105\001\001\000\026\036\157\037\077\040\121\041" +
    "\117\042\101\044\107\045\102\046\115\050\111\051\105" +
    "\001\001\000\026\036\156\037\077\040\121\041\117\042" +
    "\101\044\107\045\102\046\115\050\111\051\105\001\001" +
    "\000\026\036\155\037\077\040\121\041\117\042\101\044" +
    "\107\045\102\046\115\050\111\051\105\001\001\000\026" +
    "\036\154\037\077\040\121\041\117\042\101\044\107\045" +
    "\102\046\115\050\111\051\105\001\001\000\026\036\153" +
    "\037\077\040\121\041\117\042\101\044\107\045\102\046" +
    "\115\050\111\051\105\001\001\000\026\036\152\037\077" +
    "\040\121\041\117\042\101\044\107\045\102\046\115\050" +
    "\111\051\105\001\001\000\026\036\151\037\077\040\121" +
    "\041\117\042\101\044\107\045\102\046\115\050\111\051" +
    "\105\001\001\000\026\036\150\037\077\040\121\041\117" +
    "\042\101\044\107\045\102\046\115\050\111\051\105\001" +
    "\001\000\026\036\147\037\077\040\121\041\117\042\101" +
    "\044\107\045\102\046\115\050\111\051\105\001\001\000" +
    "\002\001\001\000\026\036\146\037\077\040\121\041\117" +
    "\042\101\044\107\045\102\046\115\050\111\051\105\001" +
    "\001\000\026\036\145\037\077\040\121\041\117\042\101" +
    "\044\107\045\102\046\115\050\111\051\105\001\001\000" +
    "\026\036\144\037\077\040\121\041\117\042\101\044\107" +
    "\045\102\046\115\050\111\051\105\001\001\000\026\036" +
    "\143\037\077\040\121\041\117\042\101\044\107\045\102" +
    "\046\115\050\111\051\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\036\163\037\077\040\121\041\117" +
    "\042\101\044\107\045\102\046\115\050\111\051\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\036\171\037" +
    "\077\040\121\041\117\042\101\044\107\045\102\046\115" +
    "\050\111\051\105\001\001\000\002\001\001\000\026\036" +
    "\173\037\077\040\121\041\117\042\101\044\107\045\102" +
    "\046\115\050\111\051\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\036\176\037\077\040\121\041\117" +
    "\042\101\044\107\045\102\046\115\050\111\051\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\036\215\037\077\040\121\041\117\042\101\044" +
    "\107\045\102\046\115\050\111\051\105\061\212\062\213" +
    "\001\001\000\026\036\205\037\077\040\121\041\117\042" +
    "\101\044\107\045\102\046\115\050\111\051\105\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\036\210\037\077\040\121\041\117" +
    "\042\101\044\107\045\102\046\115\050\111\051\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\036\220\037\077\040\121\041\117" +
    "\042\101\044\107\045\102\046\115\050\111\051\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\036\225\037\077\040\121\041" +
    "\117\042\101\044\107\045\102\046\115\050\111\051\105" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\036" +
    "\230\037\077\040\121\041\117\042\101\044\107\045\102" +
    "\046\115\050\111\051\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\074\004\237\005\006\007" +
    "\021\011\065\012\052\013\050\014\061\015\032\017\037" +
    "\020\036\021\046\022\051\024\014\025\012\026\067\032" +
    "\005\033\015\052\056\067\063\070\053\071\003\072\055" +
    "\073\026\074\004\075\031\076\045\077\030\101\062\103" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\246\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\036\257\037\077\040\121\041\117\042\101\044" +
    "\107\045\102\046\115\050\111\051\105\001\001\000\002" +
    "\001\001\000\004\016\261\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\063\267\100\266" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
    "\270\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\006\300\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\036\320\037\077\040\121\041\117\042\101\044\107\045" +
    "\102\046\115\050\111\051\105\061\316\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\036" +
    "\323\037\077\040\121\041\117\042\101\044\107\045\102" +
    "\046\115\050\111\051\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\036\333\037\077\040\121\041\117\042\101\044\107\045" +
    "\102\046\115\050\111\051\105\001\001\000\026\036\332" +
    "\037\077\040\121\041\117\042\101\044\107\045\102\046" +
    "\115\050\111\051\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\036\340\037\077\040\121\041\117\042\101" +
    "\044\107\045\102\046\115\050\111\051\105\001\001\000" +
    "\026\036\337\037\077\040\121\041\117\042\101\044\107" +
    "\045\102\046\115\050\111\051\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\036\343" +
    "\037\077\040\121\041\117\042\101\044\107\045\102\046" +
    "\115\050\111\051\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\036" +
    "\350\037\077\040\121\041\117\042\101\044\107\045\102" +
    "\046\115\050\111\051\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\036\353\037\077\040\121\041\117" +
    "\042\101\044\107\045\102\046\115\050\111\051\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\036\356" +
    "\037\077\040\121\041\117\042\101\044\107\045\102\046" +
    "\115\050\111\051\105\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\361\043\364\060\363\001\001\000" +
    "\002\001\001\000\004\016\371\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\361\043\370\001\001\000" +
    "\004\016\367\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\036\027\u0103\030\u0104\034\u0102\035\u0101\036" +
    "\u0106\037\077\040\121\041\117\042\101\044\107\045\102" +
    "\046\115\050\111\051\105\001\001\000\002\001\001\000" +
    "\032\027\u010f\030\u0110\036\u0106\037\077\040\121\041\117" +
    "\042\101\044\107\045\102\046\115\050\111\051\105\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\076\003\u0109\004" +
    "\035\005\006\007\021\011\065\012\052\013\050\014\061" +
    "\015\032\017\037\020\036\021\046\022\051\024\014\025" +
    "\012\026\067\032\005\033\015\052\056\067\063\070\053" +
    "\071\003\072\055\073\026\074\004\075\031\076\045\077" +
    "\030\101\062\103\043\001\001\000\074\004\237\005\006" +
    "\007\021\011\065\012\052\013\050\014\061\015\032\017" +
    "\037\020\036\021\046\022\051\024\014\025\012\026\067" +
    "\032\005\033\015\052\056\067\063\070\053\071\003\072" +
    "\055\073\026\074\004\075\031\076\045\077\030\101\062" +
    "\103\043\001\001\000\002\001\001\000\002\001\001\000" +
    "\076\003\u010d\004\035\005\006\007\021\011\065\012\052" +
    "\013\050\014\061\015\032\017\037\020\036\021\046\022" +
    "\051\024\014\025\012\026\067\032\005\033\015\052\056" +
    "\067\063\070\053\071\003\072\055\073\026\074\004\075" +
    "\031\076\045\077\030\101\062\103\043\001\001\000\074" +
    "\004\237\005\006\007\021\011\065\012\052\013\050\014" +
    "\061\015\032\017\037\020\036\021\046\022\051\024\014" +
    "\025\012\026\067\032\005\033\015\052\056\067\063\070" +
    "\053\071\003\072\055\073\026\074\004\075\031\076\045" +
    "\077\030\101\062\103\043\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\u0114\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\036\u0116\037\077\040\121\041\117\042\101\044\107" +
    "\045\102\046\115\050\111\051\105\001\001\000\002\001" +
    "\001\000\010\013\u011a\014\u0118\031\u011b\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\u011d\001\001\000\002\001\001\000\026" +
    "\036\u011f\037\077\040\121\041\117\042\101\044\107\045" +
    "\102\046\115\050\111\051\105\001\001\000\002\001\001" +
    "\000\026\036\u0121\037\077\040\121\041\117\042\101\044" +
    "\107\045\102\046\115\050\111\051\105\001\001\000\002" +
    "\001\001\000\004\016\u0123\001\001\000\002\001\001\000" +
    "\006\015\u0126\016\u0125\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\u012a\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\036\u012d\037\077\040\121\041\117\042\101\044\107\045" +
    "\102\046\115\050\111\051\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\032\036\u0134\037\077\040\121\041\117\042\101\044\107" +
    "\045\102\046\115\050\111\051\105\053\u0132\054\u0133\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\036\u0136\037\077\040\121\041\117\042\101\044" +
    "\107\045\102\046\115\050\111\051\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\055\u013b\056\u013e\057\u013c\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\036\u0134\037\077\040" +
    "\121\041\117\042\101\044\107\045\102\046\115\050\111" +
    "\051\105\053\u0141\054\u0133\001\001\000\002\001\001\000" +
    "\004\057\u0140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\065\u0146\001" +
    "\001\000\006\064\u0148\102\u0149\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\102\u014c\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\036\u014f\037\077\040\121\041\117\042\101\044" +
    "\107\045\102\046\115\050\111\051\105\065\u014e\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\036\u0152\037\077\040\121\041\117\042\101\044\107" +
    "\045\102\046\115\050\111\051\105\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\361\043" +
    "\364\060\u015a\001\001\000\004\016\u015d\001\001\000\002" +
    "\001\001\000\004\016\u015c\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";
    public boolean estadograf = false;
    public boolean estadobar = false;
    public int titulobar = 0;
    
    public  String getResultado(){
        return resultado;
    }
    public void syntax_error(Symbol s) {
        System.out.println("Error Sintactico en la Linea " + (s.left) +
                " Columna " + s.right + ". No se esperaba este componente: " + s.value + ".");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error síntactico irrecuperable en la Linea " +
                s.left + " Columna " + s.right + ". Componente " + s.value +
                " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= DECLARACION PYC 
            {
              Instruccion RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= START PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= RETURN PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= ASIGNACION PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= INC_DECINS PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= CALL PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= INSFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= CONTINUE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= MATCHINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= INSWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= DOWHILEINS PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= PRINT PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= INSVECTOR PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= INSASIGNVECTOR PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= INSLISTA PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= ACCESOLISTA PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= LISTASSIGN PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= LISTAPPEND PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= LISTREMOVE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // instruccion ::= INSASIGNVECT2D PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // instruccion ::= FUNCTION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // instruccion ::= STRUCTINS PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // instruccion ::= INSTANCIASTRUCT PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // instruccion ::= RASIGNSTRUCT PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // instruccion ::= error PYC 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // START ::= TKSTART CALL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new START(aleft, aright, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START",60, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // INC_DECINS ::= ID INC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDecIns(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DECINS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INC_DECINS ::= ID DEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDecIns(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DECINS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // DECLARACION ::= MUTACION ID DP TIPO IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(bleft, bright, b.toString(), c.toString(), d, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACION ::= MUTACION ID DP TIPO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(bleft, bright, b.toString(), c.toString(), null, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ASIGNACION ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assign(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // RETURN ::= TKRETURN 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Return(aleft, aright, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // RETURN ::= TKRETURN EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Return(aleft, aright, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RETURN",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // INSLISTA ::= LIST MENORQ TIPO MAYORQ ID IGUAL NEW LIST PARENABRE PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		 RESULT = new DinamicList(bleft, bright, b.toString(), a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSLISTA",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LISTAPPEND ::= ID PUNTO APPEND PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Append(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAPPEND",53, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LISTREMOVE ::= ID PUNTO REMOVE PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RemoveIns(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTREMOVE",54, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSVECTOR ::= MUTACION ID DP TIPO CORCHABRE CORCHCIERRA IGUAL CORCHABRE LISTAVALORES1 CORCHCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vect(bleft, bright, b.toString(), c.toString(), d, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSVECTOR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSVECTOR ::= MUTACION ID DP TIPO CORCHABRE CORCHCIERRA CORCHABRE CORCHCIERRA IGUAL CORCHABRE LISTAVALORES2 CORCHCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vect2D(bleft, bright, b.toString(), c.toString(), d, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSVECTOR",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LISTAVALORES1 ::= EXPRESIONES 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",41, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LISTAVALORES2 ::= EXPRESIONESARRAY 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",43, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESIONESARRAY ::= EXPRESIONESARRAY COMA EXPRESIONARRAY 
            {
              LinkedList<Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONESARRAY",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESIONESARRAY ::= EXPRESIONARRAY 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONESARRAY",44, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESIONES ::= EXPRESIONES COMA EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b;RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESIONES ::= EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>();RESULT.add(a);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",42, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESIONARRAY ::= CORCHABRE LISTAVALORES1 CORCHCIERRA 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONARRAY",45, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // INSASIGNVECTOR ::= ID CORCHABRE EXPRESION CORCHCIERRA IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignVect(aleft, aright, a.toString(), b, c ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSASIGNVECTOR",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // INSASIGNVECT2D ::= ID CORCHABRE EXPRESION CORCHCIERRA CORCHABRE EXPRESION CORCHCIERRA IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignVect2D(aleft, aright, a.toString(), b, c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSASIGNVECT2D",57, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PRINT ::= PRINTLN PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Print(aleft, aright, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF ::= TKIF PARENABRE EXPRESION PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(cleft, cright, a, b, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF ::= TKIF PARENABRE EXPRESION PARENCIERRA BLOCKINS ELSE BLOCKINS 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(cleft, cright, a, b, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF ::= TKIF PARENABRE EXPRESION PARENCIERRA BLOCKINS ELSE IF 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(cleft, cright, a, b, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // MATCHINS ::= MATCH EXPRESION LLAVEABRE BLOCKCASES LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Object> c = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(aleft, aright, b, (ArrayList<Instruccion>) c.get(0),(Instruccion)c.get(1));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCHINS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // BLOCKCASES ::= CASES DEFAULTINS 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Object> lista = new ArrayList<>();lista.add(a); lista.add(b); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKCASES",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // BLOCKCASES ::= CASES 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Object> lista = new ArrayList<>(); lista.add(a); lista.add(null); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKCASES",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BLOCKCASES ::= DEFAULTINS 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Object> lista = new ArrayList<>(); lista.add(null); lista.add(a); RESULT= lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKCASES",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASES ::= CASES CASE 
            {
              ArrayList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = b; RESULT.add((Instruccion)a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CASES ::= CASE 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add((Instruccion)a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // CASE ::= EXPRESION ARROW LLAVEABRE instrucciones LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Case(aleft, aright, a, new BloqueIns(bleft, bright, b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DEFAULTINS ::= DEFAULT ARROW LLAVEABRE instrucciones LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BloqueIns(bleft, bright, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULTINS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // INSWHILE ::= WHILE PARENABRE EXPRESION PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(aleft, aright, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSWHILE",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DOWHILEINS ::= DO BLOCKINS WHILE PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DoWhile(aleft, aright, c, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILEINS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // INSFOR ::= FOR PARENABRE IDFOR PYC EXPRESION PYC EXPRESIONFOR PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new For(aleft, aright, b, c, d, (BloqueIns)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSFOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESIONFOR ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONFOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESIONFOR ::= INC_DECINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONFOR",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IDFOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assign(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDFOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // BLOCKINS ::= LLAVEABRE instrucciones LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BloqueIns(bleft, bright,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKINS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // BREAK ::= TKBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // CONTINUE ::= TKCONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // MUTACION ::= VAR 
            {
              Object RESULT =null;
		int varrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object varr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = varr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTACION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // MUTACION ::= CONST 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = constante; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTACION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // FUNCTION ::= TIPO ID PARENABRE PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Function(bleft, bright, b.toString(), a.toString(), c, new LinkedList<Object>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // FUNCTION ::= TIPO ID PARENABRE PARAMETROS PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> c = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Function(bleft, bright, b.toString(), a.toString(), d, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // FUNCTION ::= TKVOID ID PARENABRE PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Function(bleft, bright, b.toString(), a.toString(), c, new LinkedList<Object>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // FUNCTION ::= TKVOID ID PARENABRE PARAMETROS PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> c = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Function(bleft, bright, b.toString(), a.toString(), d, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FUNCTION",58, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // PARAMETROS ::= PARAMETROS COMA PARAMETRO 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // PARAMETROS ::= PARAMETRO 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETROS",46, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PARAMETRO ::= TIPO ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Parameter(bleft, bright, b.toString(), a.toString(), TypeParameter.SIMPLE); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMETRO",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CALL ::= ID PARENABRE PARAMCALL PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallFuncIns(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CALL ::= ID PARENABRE PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new CallFuncIns(aleft, aright, a.toString(), new LinkedList<Object>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALL",59, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PARAMCALL ::= PARAMCALL COMA EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PARAMCALL ::= EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMCALL",47, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STRUCTINS ::= TKSTRUCT LLAVEABRE LISTASTRUCT LLAVECIERRA ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Struct(aleft, aright, c.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCTINS",61, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // LISTASTRUCT ::= LISTASTRUCT DATOSTRUCT 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTASTRUCT",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LISTASTRUCT ::= DATOSTRUCT 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTASTRUCT",49, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DATOSTRUCT ::= ID DP TIPOSTRUCT PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new ValStruct(aleft, aright, a.toString(), c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DATOSTRUCT",62, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // TIPOSTRUCT ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSTRUCT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // TIPOSTRUCT ::= DOUBLE 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSTRUCT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPOSTRUCT ::= INT 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSTRUCT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPOSTRUCT ::= BOOL 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSTRUCT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPOSTRUCT ::= TKSTRING 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSTRUCT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPOSTRUCT ::= ID 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSTRUCT",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTANCIASTRUCT ::= MUTACION ID DP ID IGUAL BLOQUESTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructInstance(bleft, bright, b.toString(), c.toString(), d, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTANCIASTRUCT",63, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // BLOQUESTRUCT ::= LLAVEABRE VALORESTRUCT LLAVECIERRA 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOQUESTRUCT",51, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // VALORESTRUCT ::= VALORESTRUCT COMA VALOR 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORESTRUCT",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // VALORESTRUCT ::= VALOR 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALORESTRUCT",50, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // VALOR ::= ID DP EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValorStruct(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // VALOR ::= ID DP BLOQUESTRUCT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ValorStruct(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALOR",64, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // RASIGNSTRUCT ::= ID PUNTO ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignStruct(aleft, aright, a.toString(), b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RASIGNSTRUCT",65, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // TIPO ::= DOUBLE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // TIPO ::= INT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // TIPO ::= BOOL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // TIPO ::= TKSTRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // EXPRESION ::= INCRE_DECRE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // EXPRESION ::= ARITMETICAS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // EXPRESION ::= ACCESSARRAYS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // EXPRESION ::= NATIVAS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // EXPRESION ::= RELACIONAL 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // EXPRESION ::= LOGIC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // EXPRESION ::= OTROS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // EXPRESION ::= CALLEX 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // EXPRESION ::= STRUCTACCESS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // EXPRESION ::= STRING 
            {
              Expresion RESULT =null;
		int strinleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strinright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strin = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(strinleft, strinright, strin!=null?QuitarComillas.comillas(strin.toString()):QuitarComillas.comillas(null) , Types.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // EXPRESION ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id_Acces(idleft, idright, id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // EXPRESION ::= DECIMAL 
            {
              Expresion RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(decimalleft, decimalright, decimal, Types.DECIMAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // EXPRESION ::= ENTERO 
            {
              Expresion RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(enteroleft, enteroright, entero, Types.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPRESION ::= TRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, a, Types.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPRESION ::= FALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, a, Types.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPRESION ::= TKCHAR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, a, Types.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // ARITMETICAS ::= EXPRESION MODULO EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // ARITMETICAS ::= EXPRESION SUMA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ARITMETICAS ::= EXPRESION MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ARITMETICAS ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // ARITMETICAS ::= EXPRESION DIVISION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // ARITMETICAS ::= EXPRESION POTENCIA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // RELACIONAL ::= EXPRESION IGUALACION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // RELACIONAL ::= EXPRESION DIFERENTE EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // RELACIONAL ::= EXPRESION MENORQ EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // RELACIONAL ::= EXPRESION MAYORQ EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // RELACIONAL ::= EXPRESION MAYORIGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // RELACIONAL ::= EXPRESION MENORIGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONAL",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // LOGIC ::= EXPRESION AND EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // LOGIC ::= EXPRESION XOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // LOGIC ::= EXPRESION OR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGIC",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // OTROS ::= NOT EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, b, a.toString(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTROS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // OTROS ::= MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, b, a.toString(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTROS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // OTROS ::= PARENABRE EXPRESION PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTROS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // OTROS ::= PARENABRE TIPO PARENCIERRA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cast(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("OTROS",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // ACCESSARRAYS ::= ID CORCHABRE EXPRESION CORCHCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VectAcces(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESSARRAYS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // ACCESSARRAYS ::= ID CORCHABRE EXPRESION CORCHCIERRA CORCHABRE EXPRESION CORCHCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vect2DAcces(aleft, aright, a.toString(), b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESSARRAYS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // ACCESSARRAYS ::= ID PUNTO REMOVE PARENABRE EXPRESION PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new RemoveEx(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESSARRAYS",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // NATIVAS ::= ROUND PARENABRE EXPRESION PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Natives(aleft, aright, b, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVAS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // NATIVAS ::= LEN PARENABRE EXPRESION PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Natives(aleft, aright, b, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVAS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // NATIVAS ::= TOSTRING PARENABRE EXPRESION PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Natives(aleft, aright, b, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVAS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // NATIVAS ::= ID PUNTO FIND PARENABRE EXPRESION PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Natives(aleft, aright, b, c.toString(), a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("NATIVAS",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // INCRE_DECRE ::= ID INC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDec(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // INCRE_DECRE ::= ID DEC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDec(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // CALLEX ::= ID PARENABRE PARAMCALLEX PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new CallFuncEx(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLEX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // CALLEX ::= ID PARENABRE PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new CallFuncEx(aleft, aright, a.toString(), new LinkedList<Object>()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CALLEX",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // PARAMCALLEX ::= PARAMCALL COMA EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMCALLEX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // PARAMCALLEX ::= EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMCALLEX",48, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // STRUCTACCESS ::= ID PUNTO ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAccess(aleft, aright, a.toString(), b.toString(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCTACCESS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // STRUCTACCESS ::= ID PUNTO ID PUNTO ID 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new StructAccess(aleft, aright, a.toString(), b.toString(), c.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("STRUCTACCESS",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
