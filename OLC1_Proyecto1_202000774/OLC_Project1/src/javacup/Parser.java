
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package javacup;

import java.util.ArrayList;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.*;
import Clases.*;
import java.util.Arrays;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\116\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\004\000\002\014" +
    "\004\000\002\014\004\000\002\012\010\000\002\012\006" +
    "\000\002\013\005\000\002\011\006\000\002\015\007\000" +
    "\002\015\011\000\002\015\011\000\002\025\007\000\002" +
    "\032\004\000\002\032\003\000\002\032\003\000\002\031" +
    "\004\000\002\031\003\000\002\027\007\000\002\026\007" +
    "\000\002\017\007\000\002\024\010\000\002\021\013\000" +
    "\002\030\003\000\002\030\003\000\002\022\005\000\002" +
    "\016\005\000\002\020\003\000\002\023\003\000\002\006" +
    "\003\000\002\006\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\033\002\000\002\033\003\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\005\000\002\033\005" +
    "\000\002\033\005\000\002\033\005\000\002\033\005\000" +
    "\002\033\005\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\004\000\002\033\004\000\002\033" +
    "\005\000\002\033\006\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\003\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\034\004\000\002" +
    "\034\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\030\005\024\012\035\032\030\054\017\066" +
    "\016\067\032\071\034\072\010\074\020\075\013\076\021" +
    "\001\002\000\032\002\000\005\024\012\035\032\030\054" +
    "\017\066\016\067\032\071\034\072\010\074\020\075\013" +
    "\076\021\001\002\000\004\002\234\001\002\000\004\043" +
    "\233\001\002\000\034\002\ufff9\005\ufff9\012\ufff9\032\ufff9" +
    "\052\ufff9\054\ufff9\066\ufff9\067\ufff9\071\ufff9\072\ufff9\074" +
    "\ufff9\075\ufff9\076\ufff9\001\002\000\004\047\227\001\002" +
    "\000\004\043\226\001\002\000\004\043\225\001\002\000" +
    "\004\043\uffda\001\002\000\034\002\ufffe\005\ufffe\012\ufffe" +
    "\032\ufffe\052\ufffe\054\ufffe\066\ufffe\067\ufffe\071\ufffe\072" +
    "\ufffe\074\ufffe\075\ufffe\076\ufffe\001\002\000\034\002\ufffa" +
    "\005\ufffa\012\ufffa\032\ufffa\052\ufffa\054\ufffa\066\ufffa\067" +
    "\ufffa\071\ufffa\072\ufffa\074\ufffa\075\ufffa\076\ufffa\001\002" +
    "\000\004\047\216\001\002\000\010\030\212\064\214\065" +
    "\213\001\002\000\004\051\170\001\002\000\004\043\uffd9" +
    "\001\002\000\004\043\204\001\002\000\004\043\203\001" +
    "\002\000\004\047\200\001\002\000\004\043\177\001\002" +
    "\000\034\002\ufff5\005\ufff5\012\ufff5\032\ufff5\052\ufff5\054" +
    "\ufff5\066\ufff5\067\ufff5\071\ufff5\072\ufff5\074\ufff5\075\ufff5" +
    "\076\ufff5\001\002\000\034\002\ufff6\005\ufff6\012\ufff6\032" +
    "\ufff6\052\ufff6\054\ufff6\066\ufff6\067\ufff6\071\ufff6\072\ufff6" +
    "\074\ufff6\075\ufff6\076\ufff6\001\002\000\004\054\uffd7\001" +
    "\002\000\004\043\176\001\002\000\004\047\156\001\002" +
    "\000\004\054\151\001\002\000\064\013\uffd1\014\037\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\045" +
    "\uffd1\046\uffd1\047\046\051\uffd1\054\045\055\042\056\044" +
    "\057\040\060\043\061\041\001\002\000\004\054\uffd8\001" +
    "\002\000\050\013\uffba\014\uffba\020\uffba\021\uffba\022\uffba" +
    "\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba\033\uffba\034" +
    "\uffba\035\uffba\043\uffba\045\uffba\046\uffba\050\uffba\051\uffba" +
    "\062\uffba\001\002\000\072\013\uffd1\014\037\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\043\uffd1\045" +
    "\uffd1\046\uffd1\047\046\050\uffd1\051\uffd1\054\045\055\042" +
    "\056\044\057\040\060\043\061\041\062\uffd1\001\002\000" +
    "\050\013\uffb6\014\uffb6\020\uffb6\021\uffb6\022\uffb6\023\uffb6" +
    "\024\uffb6\025\uffb6\026\uffb6\027\uffb6\033\uffb6\034\uffb6\035" +
    "\uffb6\043\uffb6\045\uffb6\046\uffb6\050\uffb6\051\uffb6\062\uffb6" +
    "\001\002\000\050\013\uffb9\014\uffb9\020\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9\033\uffb9" +
    "\034\uffb9\035\uffb9\043\uffb9\045\uffb9\046\uffb9\050\uffb9\051" +
    "\uffb9\062\uffb9\001\002\000\050\013\uffb8\014\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8\027" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\043\uffb8\045\uffb8\046\uffb8" +
    "\050\uffb8\051\uffb8\062\uffb8\001\002\000\050\013\uffbc\014" +
    "\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc" +
    "\026\uffbc\027\uffbc\033\uffbc\034\uffbc\035\uffbc\043\uffbc\045" +
    "\uffbc\046\uffbc\050\uffbc\051\uffbc\062\uffbc\001\002\000\050" +
    "\013\uffb7\014\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\026\uffb7\027\uffb7\033\uffb7\034\uffb7\035\uffb7" +
    "\043\uffb7\045\uffb7\046\uffb7\050\uffb7\051\uffb7\062\uffb7\001" +
    "\002\000\054\013\uffbb\014\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\043\uffbb\045\uffbb\046\uffbb\050\uffbb\051\uffbb" +
    "\062\uffbb\064\147\065\146\001\002\000\076\010\136\011" +
    "\142\013\uffd1\014\037\016\135\017\140\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\050\037\036\040\134\045\uffd1" +
    "\046\uffd1\047\046\050\uffd1\054\045\055\042\056\044\057" +
    "\040\060\043\061\041\001\002\000\050\013\uffd0\014\uffd0" +
    "\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0\025\uffd0\026" +
    "\uffd0\027\uffd0\033\uffd0\034\uffd0\035\uffd0\043\uffd0\045\uffd0" +
    "\046\uffd0\050\uffd0\051\uffd0\062\uffd0\001\002\000\072\013" +
    "\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\050\037\036\043\uffd1\045\uffd1\046\uffd1\047\046\050\uffd1" +
    "\051\uffd1\054\045\055\042\056\044\057\040\060\043\061" +
    "\041\062\uffd1\001\002\000\042\013\057\014\055\020\061" +
    "\021\066\022\067\023\052\024\063\025\065\026\056\027" +
    "\064\033\070\034\053\035\054\045\062\046\071\051\060" +
    "\001\002\000\072\013\uffd1\014\037\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\050\037\036\043\uffd1\045\uffd1\046" +
    "\uffd1\047\046\050\uffd1\051\uffd1\054\045\055\042\056\044" +
    "\057\040\060\043\061\041\062\uffd1\001\002\000\072\013" +
    "\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\050\037\036\043\uffd1\045\uffd1\046\uffd1\047\046\050\uffd1" +
    "\051\uffd1\054\045\055\042\056\044\057\040\060\043\061" +
    "\041\062\uffd1\001\002\000\072\013\uffd1\014\037\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\043\uffd1" +
    "\045\uffd1\046\uffd1\047\046\050\uffd1\051\uffd1\054\045\055" +
    "\042\056\044\057\040\060\043\061\041\062\uffd1\001\002" +
    "\000\072\013\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\050\037\036\043\uffd1\045\uffd1\046\uffd1\047" +
    "\046\050\uffd1\051\uffd1\054\045\055\042\056\044\057\040" +
    "\060\043\061\041\062\uffd1\001\002\000\072\013\uffd1\014" +
    "\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036\050\037" +
    "\036\043\uffd1\045\uffd1\046\uffd1\047\046\050\uffd1\051\uffd1" +
    "\054\045\055\042\056\044\057\040\060\043\061\041\062" +
    "\uffd1\001\002\000\072\013\uffd1\014\037\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\050\037\036\043\uffd1\045\uffd1" +
    "\046\uffd1\047\046\050\uffd1\051\uffd1\054\045\055\042\056" +
    "\044\057\040\060\043\061\041\062\uffd1\001\002\000\066" +
    "\013\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\050\037\036\045\uffd1\046\uffd1\047\046\054\045\055" +
    "\042\056\044\057\040\060\043\061\041\062\uffd1\063\104" +
    "\001\002\000\072\013\uffd1\014\037\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1" +
    "\034\uffd1\035\uffd1\036\050\037\036\043\uffd1\045\uffd1\046" +
    "\uffd1\047\046\050\uffd1\051\uffd1\054\045\055\042\056\044" +
    "\057\040\060\043\061\041\062\uffd1\001\002\000\072\013" +
    "\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\050\037\036\043\uffd1\045\uffd1\046\uffd1\047\046\050\uffd1" +
    "\051\uffd1\054\045\055\042\056\044\057\040\060\043\061" +
    "\041\062\uffd1\001\002\000\072\013\uffd1\014\037\020\uffd1" +
    "\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027" +
    "\uffd1\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\043\uffd1" +
    "\045\uffd1\046\uffd1\047\046\050\uffd1\051\uffd1\054\045\055" +
    "\042\056\044\057\040\060\043\061\041\062\uffd1\001\002" +
    "\000\072\013\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\050\037\036\043\uffd1\045\uffd1\046\uffd1\047" +
    "\046\050\uffd1\051\uffd1\054\045\055\042\056\044\057\040" +
    "\060\043\061\041\062\uffd1\001\002\000\072\013\uffd1\014" +
    "\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036\050\037" +
    "\036\043\uffd1\045\uffd1\046\uffd1\047\046\050\uffd1\051\uffd1" +
    "\054\045\055\042\056\044\057\040\060\043\061\041\062" +
    "\uffd1\001\002\000\072\013\uffd1\014\037\020\uffd1\021\uffd1" +
    "\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033" +
    "\uffd1\034\uffd1\035\uffd1\036\050\037\036\043\uffd1\045\uffd1" +
    "\046\uffd1\047\046\050\uffd1\051\uffd1\054\045\055\042\056" +
    "\044\057\040\060\043\061\041\062\uffd1\001\002\000\072" +
    "\013\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024" +
    "\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1" +
    "\036\050\037\036\043\uffd1\045\uffd1\046\uffd1\047\046\050" +
    "\uffd1\051\uffd1\054\045\055\042\056\044\057\040\060\043" +
    "\061\041\062\uffd1\001\002\000\072\013\uffd1\014\037\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\043" +
    "\uffd1\045\uffd1\046\uffd1\047\046\050\uffd1\051\uffd1\054\045" +
    "\055\042\056\044\057\040\060\043\061\041\062\uffd1\001" +
    "\002\000\072\013\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034" +
    "\uffd1\035\uffd1\036\050\037\036\043\uffd1\045\uffd1\046\uffd1" +
    "\047\046\050\uffd1\051\uffd1\054\045\055\042\056\044\057" +
    "\040\060\043\061\041\062\uffd1\001\002\000\050\013\057" +
    "\014\055\020\061\021\uffc6\022\uffc6\023\uffc6\024\uffc6\025" +
    "\065\026\056\027\064\033\uffc6\034\uffc6\035\uffc6\043\uffc6" +
    "\045\uffc6\046\uffc6\050\uffc6\051\uffc6\062\uffc6\001\002\000" +
    "\050\013\057\014\055\020\061\021\066\022\067\023\052" +
    "\024\063\025\065\026\056\027\064\033\uffc1\034\053\035" +
    "\054\043\uffc1\045\062\046\071\050\uffc1\051\uffc1\062\uffc1" +
    "\001\002\000\050\013\057\014\055\020\061\021\uffc8\022" +
    "\uffc8\023\uffc8\024\uffc8\025\065\026\056\027\064\033\uffc8" +
    "\034\uffc8\035\uffc8\043\uffc8\045\uffc8\046\uffc8\050\uffc8\051" +
    "\uffc8\062\uffc8\001\002\000\050\013\057\014\055\020\061" +
    "\021\uffc9\022\uffc9\023\uffc9\024\uffc9\025\065\026\056\027" +
    "\064\033\uffc9\034\uffc9\035\uffc9\043\uffc9\045\uffc9\046\uffc9" +
    "\050\uffc9\051\uffc9\062\uffc9\001\002\000\050\013\uffcb\014" +
    "\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\025\uffcb" +
    "\026\056\027\uffcb\033\uffcb\034\uffcb\035\uffcb\043\uffcb\045" +
    "\uffcb\046\uffcb\050\uffcb\051\uffcb\062\uffcb\001\002\000\050" +
    "\013\uffcf\014\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\056\027\uffcf\033\uffcf\034\uffcf\035\uffcf" +
    "\043\uffcf\045\uffcf\046\uffcf\050\uffcf\051\uffcf\062\uffcf\001" +
    "\002\000\050\013\057\014\055\020\061\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\025\065\026\056\027\064\033\uffc5\034" +
    "\uffc5\035\uffc5\043\uffc5\045\uffc5\046\uffc5\050\uffc5\051\uffc5" +
    "\062\uffc5\001\002\000\050\013\057\014\055\020\061\021" +
    "\uffc7\022\uffc7\023\uffc7\024\uffc7\025\065\026\056\027\064" +
    "\033\uffc7\034\uffc7\035\uffc7\043\uffc7\045\uffc7\046\uffc7\050" +
    "\uffc7\051\uffc7\062\uffc7\001\002\000\050\013\uffcc\014\uffcc" +
    "\020\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc\025\uffcc\026" +
    "\056\027\uffcc\033\uffcc\034\uffcc\035\uffcc\043\uffcc\045\uffcc" +
    "\046\uffcc\050\uffcc\051\uffcc\062\uffcc\001\002\000\004\052" +
    "\uffe6\001\002\000\004\062\121\001\002\000\070\013\uffd1" +
    "\014\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025" +
    "\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036\050" +
    "\037\036\045\uffd1\046\uffd1\047\046\052\uffe7\054\045\055" +
    "\042\056\044\057\040\060\043\061\041\062\uffd1\063\104" +
    "\001\002\000\004\052\116\001\002\000\070\013\uffe4\014" +
    "\uffe4\020\uffe4\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4" +
    "\026\uffe4\027\uffe4\033\uffe4\034\uffe4\035\uffe4\036\uffe4\037" +
    "\uffe4\045\uffe4\046\uffe4\047\uffe4\052\uffe4\054\uffe4\055\uffe4" +
    "\056\uffe4\057\uffe4\060\uffe4\061\uffe4\062\uffe4\063\uffe4\001" +
    "\002\000\042\013\057\014\055\020\061\021\066\022\067" +
    "\023\052\024\063\025\065\026\056\027\064\033\070\034" +
    "\053\035\054\045\062\046\071\062\111\001\002\000\004" +
    "\051\112\001\002\000\030\005\024\012\035\032\030\054" +
    "\017\066\016\067\032\071\034\072\010\074\020\075\013" +
    "\076\021\001\002\000\032\005\024\012\035\032\030\052" +
    "\115\054\017\066\016\067\032\071\034\072\010\074\020" +
    "\075\013\076\021\001\002\000\034\002\uffff\005\uffff\012" +
    "\uffff\032\uffff\052\uffff\054\uffff\066\uffff\067\uffff\071\uffff" +
    "\072\uffff\074\uffff\075\uffff\076\uffff\001\002\000\070\013" +
    "\uffe3\014\uffe3\020\uffe3\021\uffe3\022\uffe3\023\uffe3\024\uffe3" +
    "\025\uffe3\026\uffe3\027\uffe3\033\uffe3\034\uffe3\035\uffe3\036" +
    "\uffe3\037\uffe3\045\uffe3\046\uffe3\047\uffe3\052\uffe3\054\uffe3" +
    "\055\uffe3\056\uffe3\057\uffe3\060\uffe3\061\uffe3\062\uffe3\063" +
    "\uffe3\001\002\000\034\002\uffe9\005\uffe9\012\uffe9\032\uffe9" +
    "\052\uffe9\054\uffe9\066\uffe9\067\uffe9\071\uffe9\072\uffe9\074" +
    "\uffe9\075\uffe9\076\uffe9\001\002\000\004\052\uffe8\001\002" +
    "\000\070\013\uffe5\014\uffe5\020\uffe5\021\uffe5\022\uffe5\023" +
    "\uffe5\024\uffe5\025\uffe5\026\uffe5\027\uffe5\033\uffe5\034\uffe5" +
    "\035\uffe5\036\uffe5\037\uffe5\045\uffe5\046\uffe5\047\uffe5\052" +
    "\uffe5\054\uffe5\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5" +
    "\062\uffe5\063\uffe5\001\002\000\004\051\122\001\002\000" +
    "\030\005\024\012\035\032\030\054\017\066\016\067\032" +
    "\071\034\072\010\074\020\075\013\076\021\001\002\000" +
    "\032\005\024\012\035\032\030\052\124\054\017\066\016" +
    "\067\032\071\034\072\010\074\020\075\013\076\021\001" +
    "\002\000\004\052\uffe2\001\002\000\050\013\uffce\014\uffce" +
    "\020\061\021\uffce\022\uffce\023\uffce\024\uffce\025\065\026" +
    "\056\027\064\033\uffce\034\uffce\035\uffce\043\uffce\045\uffce" +
    "\046\uffce\050\uffce\051\uffce\062\uffce\001\002\000\046\013" +
    "\uffca\014\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca" +
    "\025\uffca\027\uffca\033\uffca\034\uffca\035\uffca\043\uffca\045" +
    "\uffca\046\uffca\050\uffca\051\uffca\062\uffca\001\002\000\050" +
    "\013\uffcd\014\uffcd\020\061\021\uffcd\022\uffcd\023\uffcd\024" +
    "\uffcd\025\065\026\056\027\064\033\uffcd\034\uffcd\035\uffcd" +
    "\043\uffcd\045\uffcd\046\uffcd\050\uffcd\051\uffcd\062\uffcd\001" +
    "\002\000\050\013\057\014\055\020\061\021\066\022\067" +
    "\023\052\024\063\025\065\026\056\027\064\033\uffc2\034" +
    "\uffc2\035\uffc2\043\uffc2\045\062\046\071\050\uffc2\051\uffc2" +
    "\062\uffc2\001\002\000\050\013\057\014\055\020\061\021" +
    "\066\022\067\023\052\024\063\025\065\026\056\027\064" +
    "\033\uffc3\034\uffc3\035\054\043\uffc3\045\062\046\071\050" +
    "\uffc3\051\uffc3\062\uffc3\001\002\000\050\013\057\014\055" +
    "\020\061\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\065\026" +
    "\056\027\064\033\uffc4\034\uffc4\035\uffc4\043\uffc4\045\uffc4" +
    "\046\uffc4\050\uffc4\051\uffc4\062\uffc4\001\002\000\050\013" +
    "\057\014\055\020\061\021\066\022\067\023\052\024\063" +
    "\025\065\026\056\027\064\033\uffc0\034\uffc0\035\uffc0\043" +
    "\uffc0\045\062\046\071\050\uffc0\051\uffc0\062\uffc0\001\002" +
    "\000\010\030\uffd2\043\uffd2\050\uffd2\001\002\000\010\030" +
    "\uffd4\043\uffd4\050\uffd4\001\002\000\010\030\uffd6\043\uffd6" +
    "\050\uffd6\001\002\000\004\050\144\001\002\000\010\030" +
    "\uffd3\043\uffd3\050\uffd3\001\002\000\042\013\057\014\055" +
    "\020\061\021\066\022\067\023\052\024\063\025\065\026" +
    "\056\027\064\033\070\034\053\035\054\045\062\046\071" +
    "\050\143\001\002\000\010\030\uffd5\043\uffd5\050\uffd5\001" +
    "\002\000\050\013\uffbe\014\uffbe\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\043\uffbe\045\uffbe\046\uffbe\050\uffbe\051\uffbe" +
    "\062\uffbe\001\002\000\072\013\uffd1\014\037\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\043\uffd1\045" +
    "\uffd1\046\uffd1\047\046\050\uffd1\051\uffd1\054\045\055\042" +
    "\056\044\057\040\060\043\061\041\062\uffd1\001\002\000" +
    "\050\013\uffbd\014\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\025\uffbd\026\uffbd\027\uffbd\033\uffbd\034\uffbd\035" +
    "\uffbd\043\uffbd\045\uffbd\046\uffbd\050\uffbd\051\uffbd\062\uffbd" +
    "\001\002\000\050\013\uffb5\014\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\033\uffb5" +
    "\034\uffb5\035\uffb5\043\uffb5\045\uffb5\046\uffb5\050\uffb5\051" +
    "\uffb5\062\uffb5\001\002\000\050\013\uffb4\014\uffb4\020\uffb4" +
    "\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\026\uffb4\027" +
    "\uffb4\033\uffb4\034\uffb4\035\uffb4\043\uffb4\045\uffb4\046\uffb4" +
    "\050\uffb4\051\uffb4\062\uffb4\001\002\000\050\013\uffbf\014" +
    "\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\033\uffbf\034\uffbf\035\uffbf\043\uffbf\045" +
    "\uffbf\046\uffbf\050\uffbf\051\uffbf\062\uffbf\001\002\000\004" +
    "\044\152\001\002\000\014\010\136\011\142\016\135\017" +
    "\140\040\134\001\002\000\006\030\154\043\uffef\001\002" +
    "\000\064\013\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\050\037\036\043\uffd1\045\uffd1\046\uffd1\047" +
    "\046\054\045\055\042\056\044\057\040\060\043\061\041" +
    "\001\002\000\042\013\057\014\055\020\061\021\066\022" +
    "\067\023\052\024\063\025\065\026\056\027\064\033\070" +
    "\034\053\035\054\043\ufff0\045\062\046\071\001\002\000" +
    "\004\054\157\001\002\000\004\030\174\001\002\000\004" +
    "\043\161\001\002\000\064\013\uffd1\014\037\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\043\uffd1\045" +
    "\uffd1\046\uffd1\047\046\054\045\055\042\056\044\057\040" +
    "\060\043\061\041\001\002\000\042\013\057\014\055\020" +
    "\061\021\066\022\067\023\052\024\063\025\065\026\056" +
    "\027\064\033\070\034\053\035\054\043\163\045\062\046" +
    "\071\001\002\000\004\054\017\001\002\000\004\050\uffdd" +
    "\001\002\000\004\050\uffde\001\002\000\004\050\167\001" +
    "\002\000\004\051\170\001\002\000\030\005\024\012\035" +
    "\032\030\054\017\066\016\067\032\071\034\072\010\074" +
    "\020\075\013\076\021\001\002\000\034\002\uffdf\005\uffdf" +
    "\012\uffdf\032\uffdf\052\uffdf\054\uffdf\066\uffdf\067\uffdf\071" +
    "\uffdf\072\uffdf\074\uffdf\075\uffdf\076\uffdf\001\002\000\032" +
    "\005\024\012\035\032\030\052\173\054\017\066\016\067" +
    "\032\071\034\072\010\074\020\075\013\076\021\001\002" +
    "\000\036\002\uffdb\005\uffdb\012\uffdb\032\uffdb\052\uffdb\054" +
    "\uffdb\066\uffdb\067\uffdb\070\uffdb\071\uffdb\072\uffdb\074\uffdb" +
    "\075\uffdb\076\uffdb\001\002\000\064\013\uffd1\014\037\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\043" +
    "\uffd1\045\uffd1\046\uffd1\047\046\054\045\055\042\056\044" +
    "\057\040\060\043\061\041\001\002\000\042\013\057\014" +
    "\055\020\061\021\066\022\067\023\052\024\063\025\065" +
    "\026\056\027\064\033\070\034\053\035\054\043\uffdc\045" +
    "\062\046\071\001\002\000\034\002\ufff3\005\ufff3\012\ufff3" +
    "\032\ufff3\052\ufff3\054\ufff3\066\ufff3\067\ufff3\071\ufff3\072" +
    "\ufff3\074\ufff3\075\ufff3\076\ufff3\001\002\000\034\002\ufff8" +
    "\005\ufff8\012\ufff8\032\ufff8\052\ufff8\054\ufff8\066\ufff8\067" +
    "\ufff8\071\ufff8\072\ufff8\074\ufff8\075\ufff8\076\ufff8\001\002" +
    "\000\064\013\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023" +
    "\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1" +
    "\035\uffd1\036\050\037\036\045\uffd1\046\uffd1\047\046\050" +
    "\uffd1\054\045\055\042\056\044\057\040\060\043\061\041" +
    "\001\002\000\042\013\057\014\055\020\061\021\066\022" +
    "\067\023\052\024\063\025\065\026\056\027\064\033\070" +
    "\034\053\035\054\045\062\046\071\050\202\001\002\000" +
    "\004\043\uffed\001\002\000\034\002\ufffb\005\ufffb\012\ufffb" +
    "\032\ufffb\052\ufffb\054\ufffb\066\ufffb\067\ufffb\071\ufffb\072" +
    "\ufffb\074\ufffb\075\ufffb\076\ufffb\001\002\000\034\002\ufffc" +
    "\005\ufffc\012\ufffc\032\ufffc\052\ufffc\054\ufffc\066\ufffc\067" +
    "\ufffc\071\ufffc\072\ufffc\074\ufffc\075\ufffc\076\ufffc\001\002" +
    "\000\004\072\206\001\002\000\004\047\207\001\002\000" +
    "\064\013\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1" +
    "\024\uffd1\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035" +
    "\uffd1\036\050\037\036\045\uffd1\046\uffd1\047\046\050\uffd1" +
    "\054\045\055\042\056\044\057\040\060\043\061\041\001" +
    "\002\000\042\013\057\014\055\020\061\021\066\022\067" +
    "\023\052\024\063\025\065\026\056\027\064\033\070\034" +
    "\053\035\054\045\062\046\071\050\211\001\002\000\004" +
    "\043\uffe0\001\002\000\066\013\uffd1\014\037\020\uffd1\021" +
    "\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1" +
    "\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\043\uffd1\045" +
    "\uffd1\046\uffd1\047\046\050\uffd1\054\045\055\042\056\044" +
    "\057\040\060\043\061\041\001\002\000\006\043\ufff2\050" +
    "\ufff2\001\002\000\006\043\ufff1\050\ufff1\001\002\000\044" +
    "\013\057\014\055\020\061\021\066\022\067\023\052\024" +
    "\063\025\065\026\056\027\064\033\070\034\053\035\054" +
    "\043\uffee\045\062\046\071\050\uffee\001\002\000\064\013" +
    "\uffd1\014\037\020\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1" +
    "\025\uffd1\026\uffd1\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036" +
    "\050\037\036\045\uffd1\046\uffd1\047\046\050\uffd1\054\045" +
    "\055\042\056\044\057\040\060\043\061\041\001\002\000" +
    "\042\013\057\014\055\020\061\021\066\022\067\023\052" +
    "\024\063\025\065\026\056\027\064\033\070\034\053\035" +
    "\054\045\062\046\071\050\220\001\002\000\004\051\170" +
    "\001\002\000\036\002\uffec\005\uffec\012\uffec\032\uffec\052" +
    "\uffec\054\uffec\066\uffec\067\uffec\070\222\071\uffec\072\uffec" +
    "\074\uffec\075\uffec\076\uffec\001\002\000\006\051\170\066" +
    "\016\001\002\000\034\002\uffeb\005\uffeb\012\uffeb\032\uffeb" +
    "\052\uffeb\054\uffeb\066\uffeb\067\uffeb\071\uffeb\072\uffeb\074" +
    "\uffeb\075\uffeb\076\uffeb\001\002\000\034\002\uffea\005\uffea" +
    "\012\uffea\032\uffea\052\uffea\054\uffea\066\uffea\067\uffea\071" +
    "\uffea\072\uffea\074\uffea\075\uffea\076\uffea\001\002\000\034" +
    "\002\ufffd\005\ufffd\012\ufffd\032\ufffd\052\ufffd\054\ufffd\066" +
    "\ufffd\067\ufffd\071\ufffd\072\ufffd\074\ufffd\075\ufffd\076\ufffd" +
    "\001\002\000\034\002\ufff4\005\ufff4\012\ufff4\032\ufff4\052" +
    "\ufff4\054\ufff4\066\ufff4\067\ufff4\071\ufff4\072\ufff4\074\ufff4" +
    "\075\ufff4\076\ufff4\001\002\000\064\013\uffd1\014\037\020" +
    "\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1" +
    "\027\uffd1\033\uffd1\034\uffd1\035\uffd1\036\050\037\036\045" +
    "\uffd1\046\uffd1\047\046\050\uffd1\054\045\055\042\056\044" +
    "\057\040\060\043\061\041\001\002\000\042\013\057\014" +
    "\055\020\061\021\066\022\067\023\052\024\063\025\065" +
    "\026\056\027\064\033\070\034\053\035\054\045\062\046" +
    "\071\050\231\001\002\000\004\051\170\001\002\000\034" +
    "\002\uffe1\005\uffe1\012\uffe1\032\uffe1\052\uffe1\054\uffe1\066" +
    "\uffe1\067\uffe1\071\uffe1\072\uffe1\074\uffe1\075\uffe1\076\uffe1" +
    "\001\002\000\034\002\ufff7\005\ufff7\012\ufff7\032\ufff7\052" +
    "\ufff7\054\ufff7\066\ufff7\067\ufff7\071\ufff7\072\ufff7\074\ufff7" +
    "\075\ufff7\076\ufff7\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\232\000\040\002\004\003\003\004\013\006\032\011" +
    "\030\012\011\013\021\014\022\015\014\017\025\020\024" +
    "\021\006\023\005\024\010\025\026\001\001\000\034\004" +
    "\113\006\032\011\030\012\011\013\021\014\022\015\014" +
    "\017\025\020\024\021\006\023\005\024\010\025\026\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\204\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\050\034\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\147\034\046" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\005\136\033\140\034\046\001\001\000\002\001" +
    "\001\000\006\033\132\034\046\001\001\000\002\001\001" +
    "\000\006\033\131\034\046\001\001\000\006\033\130\034" +
    "\046\001\001\000\006\033\127\034\046\001\001\000\006" +
    "\033\126\034\046\001\001\000\006\033\125\034\046\001" +
    "\001\000\006\033\124\034\046\001\001\000\016\026\102" +
    "\027\106\031\104\032\105\033\107\034\046\001\001\000" +
    "\006\033\101\034\046\001\001\000\006\033\100\034\046" +
    "\001\001\000\006\033\077\034\046\001\001\000\006\033" +
    "\076\034\046\001\001\000\006\033\075\034\046\001\001" +
    "\000\006\033\074\034\046\001\001\000\006\033\073\034" +
    "\046\001\001\000\006\033\072\034\046\001\001\000\006" +
    "\033\071\034\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\116\027\117\033\107\034\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\036\003\112\004\013\006\032\011\030\012\011\013" +
    "\021\014\022\015\014\017\025\020\024\021\006\023\005" +
    "\024\010\025\026\001\001\000\034\004\113\006\032\011" +
    "\030\012\011\013\021\014\022\015\014\017\025\020\024" +
    "\021\006\023\005\024\010\025\026\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\036\003\122\004" +
    "\013\006\032\011\030\012\011\013\021\014\022\015\014" +
    "\017\025\020\024\021\006\023\005\024\010\025\026\001" +
    "\001\000\034\004\113\006\032\011\030\012\011\013\021" +
    "\014\022\015\014\017\025\020\024\021\006\023\005\024" +
    "\010\025\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\033\144\034\046\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\152\001\001\000" +
    "\002\001\001\000\006\033\154\034\046\001\001\000\002" +
    "\001\001\000\004\022\157\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\161\034\046\001\001\000\002" +
    "\001\001\000\010\013\164\014\163\030\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\170\001\001\000\036\003\171\004\013\006\032\011" +
    "\030\012\011\013\021\014\022\015\014\017\025\020\024" +
    "\021\006\023\005\024\010\025\026\001\001\000\002\001" +
    "\001\000\034\004\113\006\032\011\030\012\011\013\021" +
    "\014\022\015\014\017\025\020\024\021\006\023\005\024" +
    "\010\025\026\001\001\000\002\001\001\000\006\033\174" +
    "\034\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\200\034\046\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\033\207" +
    "\034\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\033\214\034\046\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\033\216\034\046\001" +
    "\001\000\002\001\001\000\004\016\220\001\001\000\002" +
    "\001\001\000\006\015\223\016\222\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\033\227\034\046\001\001\000\002\001\001\000" +
    "\004\016\231\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";
    public boolean estadograf = false;
    public boolean estadobar = false;
    public int titulobar = 0;
    
    public  String getResultado(){
        return resultado;
    }
    public void syntax_error(Symbol s) {
        System.out.println("Error Sintactico en la Linea " + (s.left) +
                " Columna " + s.right + ". No se esperaba este componente: " + s.value + ".");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error síntactico irrecuperable en la Linea " +
                s.left + " Columna " + s.right + ". Componente " + s.value +
                " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= DECLARACION PYC 
            {
              Instruccion RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= ASIGNACION PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= INC_DECINS PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= INSFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= CONTINUE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= MATCHINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= INSWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= DOWHILEINS PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= PRINT PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INC_DECINS ::= ID INC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDecIns(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DECINS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INC_DECINS ::= ID DEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDecIns(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DECINS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= MUTACION ID DP TIPO IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(bleft, bright, b.toString(), c.toString(), d, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= MUTACION ID DP TIPO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(bleft, bright, b.toString(), c.toString(), null, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACION ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assign(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // PRINT ::= PRINTLN PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Print(aleft, aright, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IF ::= TKIF PARENABRE EXPRESION PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(cleft, cright, a, b, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // IF ::= TKIF PARENABRE EXPRESION PARENCIERRA BLOCKINS ELSE BLOCKINS 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(cleft, cright, a, b, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // IF ::= TKIF PARENABRE EXPRESION PARENCIERRA BLOCKINS ELSE IF 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // MATCHINS ::= MATCH EXPRESION CORCHABRE BLOCKCASES CORCHCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Object> c = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(aleft, aright, b, (ArrayList<Instruccion>) c.get(0),(Instruccion)c.get(1));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCHINS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BLOCKCASES ::= CASES DEFAULTINS 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Object> lista = new ArrayList<>();lista.add(a); lista.add(b); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKCASES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BLOCKCASES ::= CASES 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Object> lista = new ArrayList<>(); lista.add(a); lista.add(null); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKCASES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BLOCKCASES ::= DEFAULTINS 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Object> lista = new ArrayList<>(); lista.add(null); lista.add(a); RESULT= lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKCASES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASES ::= CASES CASE 
            {
              ArrayList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = b; RESULT.add((Instruccion)a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASES ::= CASE 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add((Instruccion)a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASE ::= EXPRESION ARROW CORCHABRE instrucciones CORCHCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Case(aleft, aright, a, new BloqueIns(bleft, bright, b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEFAULTINS ::= DEFAULT ARROW CORCHABRE instrucciones CORCHCIERRA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BloqueIns(bleft, bright, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULTINS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // INSWHILE ::= WHILE PARENABRE EXPRESION PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(aleft, aright, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSWHILE",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DOWHILEINS ::= DO BLOCKINS WHILE PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DoWhile(aleft, aright, c, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILEINS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSFOR ::= FOR PARENABRE IDFOR PYC EXPRESION PYC EXPRESIONFOR PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new For(aleft, aright, b, c, d, (BloqueIns)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSFOR",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EXPRESIONFOR ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONFOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPRESIONFOR ::= INC_DECINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONFOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // IDFOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assign(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDFOR",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BLOCKINS ::= CORCHABRE instrucciones CORCHCIERRA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BloqueIns(bleft, bright,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKINS",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BREAK ::= TKBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CONTINUE ::= TKCONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // MUTACION ::= VAR 
            {
              Object RESULT =null;
		int varrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object varr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = varr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTACION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // MUTACION ::= CONST 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = constante; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTACION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPO ::= DOUBLE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPO ::= INT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPO ::= BOOL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TIPO ::= TKSTRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= INCRE_DECRE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= EXPRESION MODULO EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPRESION ::= EXPRESION SUMA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPRESION ::= EXPRESION MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPRESION ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPRESION ::= EXPRESION DIVISION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPRESION ::= EXPRESION POTENCIA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPRESION ::= EXPRESION IGUALACION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPRESION ::= EXPRESION DIFERENTE EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPRESION ::= EXPRESION MENORQ EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPRESION ::= EXPRESION MAYORQ EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESION ::= EXPRESION MAYORIGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESION ::= EXPRESION MENORIGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= NOT EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, b, a.toString(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, b, a.toString(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= PARENABRE EXPRESION PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= PARENABRE TIPO PARENCIERRA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cast(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= STRING 
            {
              Expresion RESULT =null;
		int strinleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strinright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strin = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(strinleft, strinright, strin.toString().replace("\"", ""), Types.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id_Acces(idleft, idright, id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= DECIMAL 
            {
              Expresion RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(decimalleft, decimalright, decimal, Types.DECIMAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= ENTERO 
            {
              Expresion RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(enteroleft, enteroright, entero, Types.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= TRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, a, Types.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= FALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, a, Types.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= TKCHAR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, a, Types.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // INCRE_DECRE ::= ID INC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDec(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // INCRE_DECRE ::= ID DEC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDec(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
