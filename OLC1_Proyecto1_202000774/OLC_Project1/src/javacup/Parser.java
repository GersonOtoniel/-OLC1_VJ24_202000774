
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package javacup;

import java.util.ArrayList;
import java_cup.runtime.*;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.*;
import Clases.*;
import java.util.Arrays;
import java.util.List;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\153\000\002\002\004\000\002\002\003\000\002\003" +
    "\004\000\002\003\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\003\000\002\004\003\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\004\003\000\002\004\004\000\002\004\004\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\004\000\002\004\004\000\002\004\003\000\002" +
    "\013\004\000\002\013\004\000\002\011\010\000\002\011" +
    "\006\000\002\012\005\000\002\031\016\000\002\051\005" +
    "\000\002\046\010\000\002\047\010\000\002\030\014\000" +
    "\002\030\016\000\002\041\003\000\002\043\003\000\002" +
    "\044\005\000\002\044\003\000\002\042\005\000\002\042" +
    "\003\000\002\045\005\000\002\040\010\000\002\052\013" +
    "\000\002\010\006\000\002\014\007\000\002\014\011\000" +
    "\002\014\011\000\002\024\007\000\002\033\004\000\002" +
    "\033\003\000\002\033\003\000\002\032\004\000\002\032" +
    "\003\000\002\026\007\000\002\025\007\000\002\016\007" +
    "\000\002\023\010\000\002\020\013\000\002\027\003\000" +
    "\002\027\003\000\002\021\005\000\002\015\005\000\002" +
    "\017\003\000\002\022\003\000\002\006\003\000\002\006" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\034\002\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\005\000\002\034\005\000\002\034\005\000\002\034" +
    "\005\000\002\034\005\000\002\034\005\000\002\034\005" +
    "\000\002\034\005\000\002\034\005\000\002\034\004\000" +
    "\002\034\004\000\002\034\005\000\002\034\006\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\034\003" +
    "\000\002\036\005\000\002\036\005\000\002\036\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\037\006\000\002\037\011\000\002\035\004\000\002\035" +
    "\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\034\003\027\005\013\010\044\027\006\051" +
    "\023\066\041\072\016\073\017\075\020\076\040\100\047" +
    "\101\026\102\030\001\002\000\004\040\356\001\002\000" +
    "\004\040\355\001\002\000\004\051\uffbe\001\002\000\036" +
    "\002\000\003\027\005\013\010\044\027\006\051\023\066" +
    "\041\072\016\073\017\075\020\076\040\100\047\101\026" +
    "\102\030\001\002\000\004\040\354\001\002\000\004\040" +
    "\353\001\002\000\004\040\352\001\002\000\004\044\347" +
    "\001\002\000\004\002\346\001\002\000\004\051\312\001" +
    "\002\000\004\044\303\001\002\000\004\044\265\001\002" +
    "\000\064\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\070\034\055\042\uffb8\043\uffb8\044\066\046" +
    "\uffb8\051\065\052\060\053\064\054\057\062\062\063\061" +
    "\001\002\000\004\040\241\001\002\000\040\002\ufffa\003" +
    "\ufffa\005\ufffa\010\ufffa\027\ufffa\047\ufffa\051\ufffa\066\ufffa" +
    "\072\ufffa\073\ufffa\075\ufffa\076\ufffa\100\ufffa\101\ufffa\102" +
    "\ufffa\001\002\000\014\025\213\055\212\057\211\070\215" +
    "\071\214\001\002\000\040\002\ufffe\003\ufffe\005\ufffe\010" +
    "\ufffe\027\ufffe\047\ufffe\051\ufffe\066\ufffe\072\ufffe\073\ufffe" +
    "\075\ufffe\076\ufffe\100\ufffe\101\ufffe\102\ufffe\001\002\000" +
    "\040\002\ufff5\003\ufff5\005\ufff5\010\ufff5\027\ufff5\047\ufff5" +
    "\051\ufff5\066\ufff5\072\ufff5\073\ufff5\075\ufff5\076\ufff5\100" +
    "\ufff5\101\ufff5\102\ufff5\001\002\000\004\040\uffc1\001\002" +
    "\000\042\002\uffe9\003\uffe9\005\uffe9\010\uffe9\027\uffe9\040" +
    "\210\047\uffe9\051\uffe9\066\uffe9\072\uffe9\073\uffe9\075\uffe9" +
    "\076\uffe9\100\uffe9\101\uffe9\102\uffe9\001\002\000\004\040" +
    "\uffc0\001\002\000\004\040\207\001\002\000\004\040\206" +
    "\001\002\000\040\002\ufff9\003\ufff9\005\ufff9\010\ufff9\027" +
    "\ufff9\047\ufff9\051\ufff9\066\ufff9\072\ufff9\073\ufff9\075\ufff9" +
    "\076\ufff9\100\ufff9\101\ufff9\102\ufff9\001\002\000\004\040" +
    "\205\001\002\000\004\040\204\001\002\000\004\040\203" +
    "\001\002\000\004\040\202\001\002\000\004\044\176\001" +
    "\002\000\004\042\163\001\002\000\004\040\162\001\002" +
    "\000\004\040\161\001\002\000\004\051\uffbf\001\002\000" +
    "\004\040\160\001\002\000\040\002\ufff6\003\ufff6\005\ufff6" +
    "\010\ufff6\027\ufff6\047\ufff6\051\ufff6\066\ufff6\072\ufff6\073" +
    "\ufff6\075\ufff6\076\ufff6\100\ufff6\101\ufff6\102\ufff6\001\002" +
    "\000\004\046\050\001\002\000\034\003\027\005\013\010" +
    "\044\027\006\051\023\066\041\072\016\073\017\075\020" +
    "\076\040\100\047\101\026\102\030\001\002\000\004\076" +
    "\052\001\002\000\004\044\053\001\002\000\064\011\uffb8" +
    "\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070" +
    "\034\055\042\uffb8\043\uffb8\044\066\045\uffb8\051\065\052" +
    "\060\053\064\054\057\062\062\063\061\001\002\000\054" +
    "\004\uffb6\011\uffb6\012\uffb6\015\uffb6\016\uffb6\017\uffb6\020" +
    "\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\030\uffb6\031\uffb6" +
    "\032\uffb6\040\uffb6\042\uffb6\043\uffb6\045\uffb6\046\uffb6\056" +
    "\uffb6\064\uffb6\001\002\000\054\004\uffa5\011\uffa5\012\uffa5" +
    "\015\uffa5\016\uffa5\017\uffa5\020\uffa5\021\uffa5\022\uffa5\023" +
    "\uffa5\024\uffa5\030\uffa5\031\uffa5\032\uffa5\040\uffa5\042\uffa5" +
    "\043\uffa5\045\uffa5\046\uffa5\056\uffa5\064\uffa5\001\002\000" +
    "\076\004\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\070\034\055\040\uffb8\042\uffb8\043\uffb8" +
    "\044\066\045\uffb8\046\uffb8\051\065\052\060\053\064\054" +
    "\057\056\uffb8\062\062\063\061\064\uffb8\001\002\000\054" +
    "\004\uffa1\011\uffa1\012\uffa1\015\uffa1\016\uffa1\017\uffa1\020" +
    "\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\030\uffa1\031\uffa1" +
    "\032\uffa1\040\uffa1\042\uffa1\043\uffa1\045\uffa1\046\uffa1\056" +
    "\uffa1\064\uffa1\001\002\000\054\004\uffa3\011\uffa3\012\uffa3" +
    "\015\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022\uffa3\023" +
    "\uffa3\024\uffa3\030\uffa3\031\uffa3\032\uffa3\040\uffa3\042\uffa3" +
    "\043\uffa3\045\uffa3\046\uffa3\056\uffa3\064\uffa3\001\002\000" +
    "\054\004\uffa4\011\uffa4\012\uffa4\015\uffa4\016\uffa4\017\uffa4" +
    "\020\uffa4\021\uffa4\022\uffa4\023\uffa4\024\uffa4\030\uffa4\031" +
    "\uffa4\032\uffa4\040\uffa4\042\uffa4\043\uffa4\045\uffa4\046\uffa4" +
    "\056\uffa4\064\uffa4\001\002\000\054\004\uffa7\011\uffa7\012" +
    "\uffa7\015\uffa7\016\uffa7\017\uffa7\020\uffa7\021\uffa7\022\uffa7" +
    "\023\uffa7\024\uffa7\030\uffa7\031\uffa7\032\uffa7\040\uffa7\042" +
    "\uffa7\043\uffa7\045\uffa7\046\uffa7\056\uffa7\064\uffa7\001\002" +
    "\000\054\004\uffb5\011\uffb5\012\uffb5\015\uffb5\016\uffb5\017" +
    "\uffb5\020\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\030\uffb5" +
    "\031\uffb5\032\uffb5\040\uffb5\042\uffb5\043\uffb5\045\uffb5\046" +
    "\uffb5\056\uffb5\064\uffb5\001\002\000\054\004\uffa2\011\uffa2" +
    "\012\uffa2\015\uffa2\016\uffa2\017\uffa2\020\uffa2\021\uffa2\022" +
    "\uffa2\023\uffa2\024\uffa2\030\uffa2\031\uffa2\032\uffa2\040\uffa2" +
    "\042\uffa2\043\uffa2\045\uffa2\046\uffa2\056\uffa2\064\uffa2\001" +
    "\002\000\062\004\uffa6\011\uffa6\012\uffa6\015\uffa6\016\uffa6" +
    "\017\uffa6\020\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\030" +
    "\uffa6\031\uffa6\032\uffa6\040\uffa6\042\uffa6\043\uffa6\045\uffa6" +
    "\046\uffa6\055\144\056\uffa6\064\uffa6\070\146\071\145\001" +
    "\002\000\076\006\134\007\140\011\uffb8\012\056\013\133" +
    "\014\136\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070" +
    "\034\055\035\132\042\uffb8\043\uffb8\044\066\045\uffb8\051" +
    "\065\052\060\053\064\054\057\062\062\063\061\001\002" +
    "\000\054\004\uffb7\011\uffb7\012\uffb7\015\uffb7\016\uffb7\017" +
    "\uffb7\020\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\040\uffb7\042\uffb7\043\uffb7\045\uffb7\046" +
    "\uffb7\056\uffb7\064\uffb7\001\002\000\076\004\uffb8\011\uffb8" +
    "\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070" +
    "\034\055\040\uffb8\042\uffb8\043\uffb8\044\066\045\uffb8\046" +
    "\uffb8\051\065\052\060\053\064\054\057\056\uffb8\062\062" +
    "\063\061\064\uffb8\001\002\000\042\011\077\012\075\015" +
    "\100\016\106\017\107\020\073\021\102\022\104\023\076" +
    "\024\103\030\110\031\072\032\074\042\101\043\111\045" +
    "\105\001\002\000\076\004\uffb8\011\uffb8\012\056\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034\055\040\uffb8" +
    "\042\uffb8\043\uffb8\044\066\045\uffb8\046\uffb8\051\065\052" +
    "\060\053\064\054\057\056\uffb8\062\062\063\061\064\uffb8" +
    "\001\002\000\076\004\uffb8\011\uffb8\012\056\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\070\034\055\040\uffb8\042" +
    "\uffb8\043\uffb8\044\066\045\uffb8\046\uffb8\051\065\052\060" +
    "\053\064\054\057\056\uffb8\062\062\063\061\064\uffb8\001" +
    "\002\000\076\004\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\070\034\055\040\uffb8\042\uffb8" +
    "\043\uffb8\044\066\045\uffb8\046\uffb8\051\065\052\060\053" +
    "\064\054\057\056\uffb8\062\062\063\061\064\uffb8\001\002" +
    "\000\076\004\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\070\034\055\040\uffb8\042\uffb8\043" +
    "\uffb8\044\066\045\uffb8\046\uffb8\051\065\052\060\053\064" +
    "\054\057\056\uffb8\062\062\063\061\064\uffb8\001\002\000" +
    "\076\004\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031" +
    "\uffb8\032\uffb8\033\070\034\055\040\uffb8\042\uffb8\043\uffb8" +
    "\044\066\045\uffb8\046\uffb8\051\065\052\060\053\064\054" +
    "\057\056\uffb8\062\062\063\061\064\uffb8\001\002\000\076" +
    "\004\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\070\034\055\040\uffb8\042\uffb8\043\uffb8\044" +
    "\066\045\uffb8\046\uffb8\051\065\052\060\053\064\054\057" +
    "\056\uffb8\062\062\063\061\064\uffb8\001\002\000\076\004" +
    "\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\070\034\055\040\uffb8\042\uffb8\043\uffb8\044\066" +
    "\045\uffb8\046\uffb8\051\065\052\060\053\064\054\057\056" +
    "\uffb8\062\062\063\061\064\uffb8\001\002\000\076\004\uffb8" +
    "\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\070\034\055\040\uffb8\042\uffb8\043\uffb8\044\066\045" +
    "\uffb8\046\uffb8\051\065\052\060\053\064\054\057\056\uffb8" +
    "\062\062\063\061\064\uffb8\001\002\000\076\004\uffb8\011" +
    "\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\070\034\055\040\uffb8\042\uffb8\043\uffb8\044\066\045\uffb8" +
    "\046\uffb8\051\065\052\060\053\064\054\057\056\uffb8\062" +
    "\062\063\061\064\uffb8\001\002\000\076\004\uffb8\011\uffb8" +
    "\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070" +
    "\034\055\040\uffb8\042\uffb8\043\uffb8\044\066\045\uffb8\046" +
    "\uffb8\051\065\052\060\053\064\054\057\056\uffb8\062\062" +
    "\063\061\064\uffb8\001\002\000\076\004\uffb8\011\uffb8\012" +
    "\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034" +
    "\055\040\uffb8\042\uffb8\043\uffb8\044\066\045\uffb8\046\uffb8" +
    "\051\065\052\060\053\064\054\057\056\uffb8\062\062\063" +
    "\061\064\uffb8\001\002\000\004\040\uffc7\001\002\000\076" +
    "\004\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\070\034\055\040\uffb8\042\uffb8\043\uffb8\044" +
    "\066\045\uffb8\046\uffb8\051\065\052\060\053\064\054\057" +
    "\056\uffb8\062\062\063\061\064\uffb8\001\002\000\076\004" +
    "\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\070\034\055\040\uffb8\042\uffb8\043\uffb8\044\066" +
    "\045\uffb8\046\uffb8\051\065\052\060\053\064\054\057\056" +
    "\uffb8\062\062\063\061\064\uffb8\001\002\000\076\004\uffb8" +
    "\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\070\034\055\040\uffb8\042\uffb8\043\uffb8\044\066\045" +
    "\uffb8\046\uffb8\051\065\052\060\053\064\054\057\056\uffb8" +
    "\062\062\063\061\064\uffb8\001\002\000\076\004\uffb8\011" +
    "\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\070\034\055\040\uffb8\042\uffb8\043\uffb8\044\066\045\uffb8" +
    "\046\uffb8\051\065\052\060\053\064\054\057\056\uffb8\062" +
    "\062\063\061\064\uffb8\001\002\000\054\004\uffb1\011\077" +
    "\012\075\015\100\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022" +
    "\104\023\076\024\103\030\uffb1\031\uffb1\032\uffb1\040\uffb1" +
    "\042\uffb1\043\uffb1\045\uffb1\046\uffb1\056\uffb1\064\uffb1\001" +
    "\002\000\054\004\uffac\011\077\012\075\015\100\016\106" +
    "\017\107\020\073\021\102\022\104\023\076\024\103\030" +
    "\uffac\031\072\032\074\040\uffac\042\101\043\111\045\uffac" +
    "\046\uffac\056\uffac\064\uffac\001\002\000\054\004\uffb3\011" +
    "\077\012\075\015\100\016\uffb3\017\uffb3\020\uffb3\021\uffb3" +
    "\022\104\023\076\024\103\030\uffb3\031\uffb3\032\uffb3\040" +
    "\uffb3\042\uffb3\043\uffb3\045\uffb3\046\uffb3\056\uffb3\064\uffb3" +
    "\001\002\000\054\004\uffb4\011\077\012\075\015\100\016" +
    "\uffb4\017\uffb4\020\uffb4\021\uffb4\022\104\023\076\024\103" +
    "\030\uffb4\031\uffb4\032\uffb4\040\uffb4\042\uffb4\043\uffb4\045" +
    "\uffb4\046\uffb4\056\uffb4\064\uffb4\001\002\000\054\004\uff9c" +
    "\011\uff9c\012\uff9c\015\uff9c\016\uff9c\017\uff9c\020\uff9c\021" +
    "\uff9c\022\uff9c\023\076\024\uff9c\030\uff9c\031\uff9c\032\uff9c" +
    "\040\uff9c\042\uff9c\043\uff9c\045\uff9c\046\uff9c\056\uff9c\064" +
    "\uff9c\001\002\000\054\004\uffa0\011\uffa0\012\uffa0\015\uffa0" +
    "\016\uffa0\017\uffa0\020\uffa0\021\uffa0\022\uffa0\023\076\024" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\040\uffa0\042\uffa0\043\uffa0" +
    "\045\uffa0\046\uffa0\056\uffa0\064\uffa0\001\002\000\054\004" +
    "\uffb0\011\077\012\075\015\100\016\uffb0\017\uffb0\020\uffb0" +
    "\021\uffb0\022\104\023\076\024\103\030\uffb0\031\uffb0\032" +
    "\uffb0\040\uffb0\042\uffb0\043\uffb0\045\uffb0\046\uffb0\056\uffb0" +
    "\064\uffb0\001\002\000\054\004\uffb2\011\077\012\075\015" +
    "\100\016\uffb2\017\uffb2\020\uffb2\021\uffb2\022\104\023\076" +
    "\024\103\030\uffb2\031\uffb2\032\uffb2\040\uffb2\042\uffb2\043" +
    "\uffb2\045\uffb2\046\uffb2\056\uffb2\064\uffb2\001\002\000\054" +
    "\004\uff9d\011\uff9d\012\uff9d\015\uff9d\016\uff9d\017\uff9d\020" +
    "\uff9d\021\uff9d\022\uff9d\023\076\024\uff9d\030\uff9d\031\uff9d" +
    "\032\uff9d\040\uff9d\042\uff9d\043\uff9d\045\uff9d\046\uff9d\056" +
    "\uff9d\064\uff9d\001\002\000\054\004\uff9f\011\uff9f\012\uff9f" +
    "\015\100\016\uff9f\017\uff9f\020\uff9f\021\uff9f\022\104\023" +
    "\076\024\103\030\uff9f\031\uff9f\032\uff9f\040\uff9f\042\uff9f" +
    "\043\uff9f\045\uff9f\046\uff9f\056\uff9f\064\uff9f\001\002\000" +
    "\052\004\uff9b\011\uff9b\012\uff9b\015\uff9b\016\uff9b\017\uff9b" +
    "\020\uff9b\021\uff9b\022\uff9b\024\uff9b\030\uff9b\031\uff9b\032" +
    "\uff9b\040\uff9b\042\uff9b\043\uff9b\045\uff9b\046\uff9b\056\uff9b" +
    "\064\uff9b\001\002\000\054\004\uff9e\011\uff9e\012\uff9e\015" +
    "\100\016\uff9e\017\uff9e\020\uff9e\021\uff9e\022\104\023\076" +
    "\024\103\030\uff9e\031\uff9e\032\uff9e\040\uff9e\042\uff9e\043" +
    "\uff9e\045\uff9e\046\uff9e\056\uff9e\064\uff9e\001\002\000\054" +
    "\004\uffad\011\077\012\075\015\100\016\106\017\107\020" +
    "\073\021\102\022\104\023\076\024\103\030\uffad\031\uffad" +
    "\032\uffad\040\uffad\042\101\043\111\045\uffad\046\uffad\056" +
    "\uffad\064\uffad\001\002\000\054\004\uffaf\011\077\012\075" +
    "\015\100\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022\104\023" +
    "\076\024\103\030\uffaf\031\uffaf\032\uffaf\040\uffaf\042\uffaf" +
    "\043\uffaf\045\uffaf\046\uffaf\056\uffaf\064\uffaf\001\002\000" +
    "\054\004\uffae\011\077\012\075\015\100\016\106\017\107" +
    "\020\073\021\102\022\104\023\076\024\103\030\uffae\031" +
    "\uffae\032\074\040\uffae\042\101\043\111\045\uffae\046\uffae" +
    "\056\uffae\064\uffae\001\002\000\054\004\uffab\011\077\012" +
    "\075\015\100\016\106\017\107\020\073\021\102\022\104" +
    "\023\076\024\103\030\uffab\031\uffab\032\uffab\040\uffab\042" +
    "\101\043\111\045\uffab\046\uffab\056\uffab\064\uffab\001\002" +
    "\000\014\025\uffb9\040\uffb9\043\uffb9\045\uffb9\055\uffb9\001" +
    "\002\000\014\025\uffbb\040\uffbb\043\uffbb\045\uffbb\055\uffbb" +
    "\001\002\000\014\025\uffbd\040\uffbd\043\uffbd\045\uffbd\055" +
    "\uffbd\001\002\000\004\045\142\001\002\000\014\025\uffba" +
    "\040\uffba\043\uffba\045\uffba\055\uffba\001\002\000\042\011" +
    "\077\012\075\015\100\016\106\017\107\020\073\021\102" +
    "\022\104\023\076\024\103\030\110\031\072\032\074\042" +
    "\101\043\111\045\141\001\002\000\014\025\uffbc\040\uffbc" +
    "\043\uffbc\045\uffbc\055\uffbc\001\002\000\054\004\uffa9\011" +
    "\uffa9\012\uffa9\015\uffa9\016\uffa9\017\uffa9\020\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\030\uffa9\031\uffa9\032\uffa9\040" +
    "\uffa9\042\uffa9\043\uffa9\045\uffa9\046\uffa9\056\uffa9\064\uffa9" +
    "\001\002\000\076\004\uffb8\011\uffb8\012\056\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\070\034\055\040\uffb8\042" +
    "\uffb8\043\uffb8\044\066\045\uffb8\046\uffb8\051\065\052\060" +
    "\053\064\054\057\056\uffb8\062\062\063\061\064\uffb8\001" +
    "\002\000\054\004\uffa8\011\uffa8\012\uffa8\015\uffa8\016\uffa8" +
    "\017\uffa8\020\uffa8\021\uffa8\022\uffa8\023\uffa8\024\uffa8\030" +
    "\uffa8\031\uffa8\032\uffa8\040\uffa8\042\uffa8\043\uffa8\045\uffa8" +
    "\046\uffa8\056\uffa8\064\uffa8\001\002\000\064\011\uffb8\012" +
    "\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034" +
    "\055\042\uffb8\043\uffb8\044\066\051\065\052\060\053\064" +
    "\054\057\056\uffb8\062\062\063\061\001\002\000\054\004" +
    "\uff98\011\uff98\012\uff98\015\uff98\016\uff98\017\uff98\020\uff98" +
    "\021\uff98\022\uff98\023\uff98\024\uff98\030\uff98\031\uff98\032" +
    "\uff98\040\uff98\042\uff98\043\uff98\045\uff98\046\uff98\056\uff98" +
    "\064\uff98\001\002\000\054\004\uff97\011\uff97\012\uff97\015" +
    "\uff97\016\uff97\017\uff97\020\uff97\021\uff97\022\uff97\023\uff97" +
    "\024\uff97\030\uff97\031\uff97\032\uff97\040\uff97\042\uff97\043" +
    "\uff97\045\uff97\046\uff97\056\uff97\064\uff97\001\002\000\042" +
    "\011\077\012\075\015\100\016\106\017\107\020\073\021" +
    "\102\022\104\023\076\024\103\030\110\031\072\032\074" +
    "\042\101\043\111\056\150\001\002\000\056\004\uff9a\011" +
    "\uff9a\012\uff9a\015\uff9a\016\uff9a\017\uff9a\020\uff9a\021\uff9a" +
    "\022\uff9a\023\uff9a\024\uff9a\030\uff9a\031\uff9a\032\uff9a\040" +
    "\uff9a\042\uff9a\043\uff9a\045\uff9a\046\uff9a\055\151\056\uff9a" +
    "\064\uff9a\001\002\000\064\011\uffb8\012\056\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\070\034\055\042\uffb8\043" +
    "\uffb8\044\066\051\065\052\060\053\064\054\057\056\uffb8" +
    "\062\062\063\061\001\002\000\042\011\077\012\075\015" +
    "\100\016\106\017\107\020\073\021\102\022\104\023\076" +
    "\024\103\030\110\031\072\032\074\042\101\043\111\056" +
    "\153\001\002\000\054\004\uff99\011\uff99\012\uff99\015\uff99" +
    "\016\uff99\017\uff99\020\uff99\021\uff99\022\uff99\023\uff99\024" +
    "\uff99\030\uff99\031\uff99\032\uff99\040\uff99\042\uff99\043\uff99" +
    "\045\uff99\046\uff99\056\uff99\064\uff99\001\002\000\054\004" +
    "\uffaa\011\uffaa\012\uffaa\015\uffaa\016\uffaa\017\uffaa\020\uffaa" +
    "\021\uffaa\022\uffaa\023\uffaa\024\uffaa\030\uffaa\031\uffaa\032" +
    "\uffaa\040\uffaa\042\uffaa\043\uffaa\045\uffaa\046\uffaa\056\uffaa" +
    "\064\uffaa\001\002\000\036\003\027\005\013\010\044\027" +
    "\006\047\157\051\023\066\041\072\016\073\017\075\020" +
    "\076\040\100\047\101\026\102\030\001\002\000\040\002" +
    "\uffff\003\uffff\005\uffff\010\uffff\027\uffff\047\uffff\051\uffff" +
    "\066\uffff\072\uffff\073\uffff\075\uffff\076\uffff\100\uffff\101" +
    "\uffff\102\uffff\001\002\000\042\002\uffc2\003\uffc2\005\uffc2" +
    "\010\uffc2\027\uffc2\047\uffc2\051\uffc2\066\uffc2\072\uffc2\073" +
    "\uffc2\074\uffc2\075\uffc2\076\uffc2\100\uffc2\101\uffc2\102\uffc2" +
    "\001\002\000\040\002\ufff3\003\ufff3\005\ufff3\010\ufff3\027" +
    "\ufff3\047\ufff3\051\ufff3\066\ufff3\072\ufff3\073\ufff3\075\ufff3" +
    "\076\ufff3\100\ufff3\101\ufff3\102\ufff3\001\002\000\040\002" +
    "\uffed\003\uffed\005\uffed\010\uffed\027\uffed\047\uffed\051\uffed" +
    "\066\uffed\072\uffed\073\uffed\075\uffed\076\uffed\100\uffed\101" +
    "\uffed\102\uffed\001\002\000\040\002\ufffb\003\ufffb\005\ufffb" +
    "\010\ufffb\027\ufffb\047\ufffb\051\ufffb\066\ufffb\072\ufffb\073" +
    "\ufffb\075\ufffb\076\ufffb\100\ufffb\101\ufffb\102\ufffb\001\002" +
    "\000\014\006\134\007\140\013\133\014\136\035\132\001" +
    "\002\000\004\043\165\001\002\000\004\042\166\001\002" +
    "\000\004\051\167\001\002\000\004\043\170\001\002\000" +
    "\004\025\171\001\002\000\004\067\172\001\002\000\004" +
    "\066\173\001\002\000\004\044\174\001\002\000\004\045" +
    "\175\001\002\000\004\040\uffe3\001\002\000\064\011\uffb8" +
    "\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022" +
    "\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070" +
    "\034\055\042\uffb8\043\uffb8\044\066\045\uffb8\051\065\052" +
    "\060\053\064\054\057\062\062\063\061\001\002\000\042" +
    "\011\077\012\075\015\100\016\106\017\107\020\073\021" +
    "\102\022\104\023\076\024\103\030\110\031\072\032\074" +
    "\042\101\043\111\045\200\001\002\000\004\046\050\001" +
    "\002\000\040\002\uffc8\003\uffc8\005\uffc8\010\uffc8\027\uffc8" +
    "\047\uffc8\051\uffc8\066\uffc8\072\uffc8\073\uffc8\075\uffc8\076" +
    "\uffc8\100\uffc8\101\uffc8\102\uffc8\001\002\000\040\002\ufff1" +
    "\003\ufff1\005\ufff1\010\ufff1\027\ufff1\047\ufff1\051\ufff1\066" +
    "\ufff1\072\ufff1\073\ufff1\075\ufff1\076\ufff1\100\ufff1\101\ufff1" +
    "\102\ufff1\001\002\000\040\002\uffef\003\uffef\005\uffef\010" +
    "\uffef\027\uffef\047\uffef\051\uffef\066\uffef\072\uffef\073\uffef" +
    "\075\uffef\076\uffef\100\uffef\101\uffef\102\uffef\001\002\000" +
    "\040\002\uffec\003\uffec\005\uffec\010\uffec\027\uffec\047\uffec" +
    "\051\uffec\066\uffec\072\uffec\073\uffec\075\uffec\076\uffec\100" +
    "\uffec\101\uffec\102\uffec\001\002\000\040\002\ufffd\003\ufffd" +
    "\005\ufffd\010\ufffd\027\ufffd\047\ufffd\051\ufffd\066\ufffd\072" +
    "\ufffd\073\ufffd\075\ufffd\076\ufffd\100\ufffd\101\ufffd\102\ufffd" +
    "\001\002\000\040\002\ufffc\003\ufffc\005\ufffc\010\ufffc\027" +
    "\ufffc\047\ufffc\051\ufffc\066\ufffc\072\ufffc\073\ufffc\075\ufffc" +
    "\076\ufffc\100\ufffc\101\ufffc\102\ufffc\001\002\000\040\002" +
    "\ufff8\003\ufff8\005\ufff8\010\ufff8\027\ufff8\047\ufff8\051\ufff8" +
    "\066\ufff8\072\ufff8\073\ufff8\075\ufff8\076\ufff8\100\ufff8\101" +
    "\ufff8\102\ufff8\001\002\000\040\002\uffea\003\uffea\005\uffea" +
    "\010\uffea\027\uffea\047\uffea\051\uffea\066\uffea\072\uffea\073" +
    "\uffea\075\uffea\076\uffea\100\uffea\101\uffea\102\uffea\001\002" +
    "\000\070\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8" +
    "\032\uffb8\033\070\034\055\040\uffb8\042\uffb8\043\uffb8\044" +
    "\066\051\065\052\060\053\064\054\057\060\230\061\231" +
    "\062\062\063\061\001\002\000\064\011\uffb8\012\056\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034\055\042" +
    "\uffb8\043\uffb8\044\066\051\065\052\060\053\064\054\057" +
    "\056\uffb8\062\062\063\061\001\002\000\066\011\uffb8\012" +
    "\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034" +
    "\055\040\uffb8\042\uffb8\043\uffb8\044\066\045\uffb8\051\065" +
    "\052\060\053\064\054\057\062\062\063\061\001\002\000" +
    "\006\040\uffe8\045\uffe8\001\002\000\006\040\uffe7\045\uffe7" +
    "\001\002\000\044\011\077\012\075\015\100\016\106\017" +
    "\107\020\073\021\102\022\104\023\076\024\103\030\110" +
    "\031\072\032\074\040\uffe4\042\101\043\111\045\uffe4\001" +
    "\002\000\042\011\077\012\075\015\100\016\106\017\107" +
    "\020\073\021\102\022\104\023\076\024\103\030\110\031" +
    "\072\032\074\042\101\043\111\056\220\001\002\000\006" +
    "\025\222\055\221\001\002\000\064\011\uffb8\012\056\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034\055\042" +
    "\uffb8\043\uffb8\044\066\051\065\052\060\053\064\054\057" +
    "\056\uffb8\062\062\063\061\001\002\000\064\011\uffb8\012" +
    "\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034" +
    "\055\040\uffb8\042\uffb8\043\uffb8\044\066\051\065\052\060" +
    "\053\064\054\057\062\062\063\061\001\002\000\042\011" +
    "\077\012\075\015\100\016\106\017\107\020\073\021\102" +
    "\022\104\023\076\024\103\030\110\031\072\032\074\040" +
    "\uffd6\042\101\043\111\001\002\000\042\011\077\012\075" +
    "\015\100\016\106\017\107\020\073\021\102\022\104\023" +
    "\076\024\103\030\110\031\072\032\074\042\101\043\111" +
    "\056\225\001\002\000\004\025\226\001\002\000\064\011" +
    "\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\070\034\055\040\uffb8\042\uffb8\043\uffb8\044\066\051\065" +
    "\052\060\053\064\054\057\062\062\063\061\001\002\000" +
    "\042\011\077\012\075\015\100\016\106\017\107\020\073" +
    "\021\102\022\104\023\076\024\103\030\110\031\072\032" +
    "\074\040\uffd5\042\101\043\111\001\002\000\004\044\236" +
    "\001\002\000\004\044\233\001\002\000\042\011\077\012" +
    "\075\015\100\016\106\017\107\020\073\021\102\022\104" +
    "\023\076\024\103\030\110\031\072\032\074\040\uffe2\042" +
    "\101\043\111\001\002\000\064\011\uffb8\012\056\015\uffb8" +
    "\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034\055\042\uffb8" +
    "\043\uffb8\044\066\045\uffb8\051\065\052\060\053\064\054" +
    "\057\062\062\063\061\001\002\000\042\011\077\012\075" +
    "\015\100\016\106\017\107\020\073\021\102\022\104\023" +
    "\076\024\103\030\110\031\072\032\074\042\101\043\111" +
    "\045\235\001\002\000\004\040\uffe1\001\002\000\064\011" +
    "\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\070\034\055\042\uffb8\043\uffb8\044\066\045\uffb8\051\065" +
    "\052\060\053\064\054\057\062\062\063\061\001\002\000" +
    "\042\011\077\012\075\015\100\016\106\017\107\020\073" +
    "\021\102\022\104\023\076\024\103\030\110\031\072\032" +
    "\074\042\101\043\111\045\240\001\002\000\004\040\uffe0" +
    "\001\002\000\040\002\uffeb\003\uffeb\005\uffeb\010\uffeb\027" +
    "\uffeb\047\uffeb\051\uffeb\066\uffeb\072\uffeb\073\uffeb\075\uffeb" +
    "\076\uffeb\100\uffeb\101\uffeb\102\uffeb\001\002\000\042\011" +
    "\077\012\075\015\100\016\106\017\107\020\073\021\102" +
    "\022\104\023\076\024\103\030\110\031\072\032\074\042" +
    "\101\043\111\046\243\001\002\000\066\011\uffb8\012\056" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034\055" +
    "\042\uffb8\043\uffb8\044\066\051\065\052\060\053\064\054" +
    "\057\062\062\063\061\064\uffb8\065\250\001\002\000\004" +
    "\047\264\001\002\000\070\011\uffb8\012\056\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\070\034\055\042\uffb8\043" +
    "\uffb8\044\066\047\uffce\051\065\052\060\053\064\054\057" +
    "\062\062\063\061\064\uffb8\065\250\001\002\000\004\047" +
    "\uffcd\001\002\000\070\011\uffcb\012\uffcb\015\uffcb\016\uffcb" +
    "\017\uffcb\020\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\030" +
    "\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\047\uffcb\051\uffcb\052\uffcb\053\uffcb\054\uffcb\062" +
    "\uffcb\063\uffcb\064\uffcb\065\uffcb\001\002\000\004\064\256" +
    "\001\002\000\042\011\077\012\075\015\100\016\106\017" +
    "\107\020\073\021\102\022\104\023\076\024\103\030\110" +
    "\031\072\032\074\042\101\043\111\064\252\001\002\000" +
    "\004\046\253\001\002\000\034\003\027\005\013\010\044" +
    "\027\006\051\023\066\041\072\016\073\017\075\020\076" +
    "\040\100\047\101\026\102\030\001\002\000\036\003\027" +
    "\005\013\010\044\027\006\047\255\051\023\066\041\072" +
    "\016\073\017\075\020\076\040\100\047\101\026\102\030" +
    "\001\002\000\070\011\uffca\012\uffca\015\uffca\016\uffca\017" +
    "\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024\uffca\030\uffca" +
    "\031\uffca\032\uffca\033\uffca\034\uffca\042\uffca\043\uffca\044" +
    "\uffca\047\uffca\051\uffca\052\uffca\053\uffca\054\uffca\062\uffca" +
    "\063\uffca\064\uffca\065\uffca\001\002\000\004\046\257\001" +
    "\002\000\034\003\027\005\013\010\044\027\006\051\023" +
    "\066\041\072\016\073\017\075\020\076\040\100\047\101" +
    "\026\102\030\001\002\000\036\003\027\005\013\010\044" +
    "\027\006\047\261\051\023\066\041\072\016\073\017\075" +
    "\020\076\040\100\047\101\026\102\030\001\002\000\004" +
    "\047\uffc9\001\002\000\004\047\uffcf\001\002\000\070\011" +
    "\uffcc\012\uffcc\015\uffcc\016\uffcc\017\uffcc\020\uffcc\021\uffcc" +
    "\022\uffcc\023\uffcc\024\uffcc\030\uffcc\031\uffcc\032\uffcc\033" +
    "\uffcc\034\uffcc\042\uffcc\043\uffcc\044\uffcc\047\uffcc\051\uffcc" +
    "\052\uffcc\053\uffcc\054\uffcc\062\uffcc\063\uffcc\064\uffcc\065" +
    "\uffcc\001\002\000\040\002\uffd0\003\uffd0\005\uffd0\010\uffd0" +
    "\027\uffd0\047\uffd0\051\uffd0\066\uffd0\072\uffd0\073\uffd0\075" +
    "\uffd0\076\uffd0\100\uffd0\101\uffd0\102\uffd0\001\002\000\004" +
    "\051\266\001\002\000\004\025\301\001\002\000\004\040" +
    "\270\001\002\000\064\011\uffb8\012\056\015\uffb8\016\uffb8" +
    "\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030" +
    "\uffb8\031\uffb8\032\uffb8\033\070\034\055\040\uffb8\042\uffb8" +
    "\043\uffb8\044\066\051\065\052\060\053\064\054\057\062" +
    "\062\063\061\001\002\000\042\011\077\012\075\015\100" +
    "\016\106\017\107\020\073\021\102\022\104\023\076\024" +
    "\103\030\110\031\072\032\074\040\272\042\101\043\111" +
    "\001\002\000\004\051\274\001\002\000\004\045\uffc4\001" +
    "\002\000\010\025\213\070\215\071\214\001\002\000\004" +
    "\045\uffc5\001\002\000\004\045\277\001\002\000\004\046" +
    "\050\001\002\000\040\002\uffc6\003\uffc6\005\uffc6\010\uffc6" +
    "\027\uffc6\047\uffc6\051\uffc6\066\uffc6\072\uffc6\073\uffc6\075" +
    "\uffc6\076\uffc6\100\uffc6\101\uffc6\102\uffc6\001\002\000\064" +
    "\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021" +
    "\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8" +
    "\033\070\034\055\040\uffb8\042\uffb8\043\uffb8\044\066\051" +
    "\065\052\060\053\064\054\057\062\062\063\061\001\002" +
    "\000\042\011\077\012\075\015\100\016\106\017\107\020" +
    "\073\021\102\022\104\023\076\024\103\030\110\031\072" +
    "\032\074\040\uffc3\042\101\043\111\001\002\000\064\011" +
    "\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8" +
    "\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033" +
    "\070\034\055\042\uffb8\043\uffb8\044\066\045\uffb8\051\065" +
    "\052\060\053\064\054\057\062\062\063\061\001\002\000" +
    "\042\011\077\012\075\015\100\016\106\017\107\020\073" +
    "\021\102\022\104\023\076\024\103\030\110\031\072\032" +
    "\074\042\101\043\111\045\305\001\002\000\004\046\050" +
    "\001\002\000\042\002\uffd3\003\uffd3\005\uffd3\010\uffd3\027" +
    "\uffd3\047\uffd3\051\uffd3\066\uffd3\072\uffd3\073\uffd3\074\307" +
    "\075\uffd3\076\uffd3\100\uffd3\101\uffd3\102\uffd3\001\002\000" +
    "\006\046\050\072\016\001\002\000\040\002\uffd2\003\uffd2" +
    "\005\uffd2\010\uffd2\027\uffd2\047\uffd2\051\uffd2\066\uffd2\072" +
    "\uffd2\073\uffd2\075\uffd2\076\uffd2\100\uffd2\101\uffd2\102\uffd2" +
    "\001\002\000\040\002\uffd1\003\uffd1\005\uffd1\010\uffd1\027" +
    "\uffd1\047\uffd1\051\uffd1\066\uffd1\072\uffd1\073\uffd1\075\uffd1" +
    "\076\uffd1\100\uffd1\101\uffd1\102\uffd1\001\002\000\004\041" +
    "\313\001\002\000\014\006\134\007\140\013\133\014\136" +
    "\035\132\001\002\000\010\025\316\040\uffe5\055\315\001" +
    "\002\000\004\056\320\001\002\000\064\011\uffb8\012\056" +
    "\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023" +
    "\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034\055" +
    "\040\uffb8\042\uffb8\043\uffb8\044\066\051\065\052\060\053" +
    "\064\054\057\062\062\063\061\001\002\000\042\011\077" +
    "\012\075\015\100\016\106\017\107\020\073\021\102\022" +
    "\104\023\076\024\103\030\110\031\072\032\074\040\uffe6" +
    "\042\101\043\111\001\002\000\006\025\322\055\321\001" +
    "\002\000\004\056\332\001\002\000\004\055\323\001\002" +
    "\000\066\004\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8\017" +
    "\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8" +
    "\031\uffb8\032\uffb8\033\070\034\055\042\uffb8\043\uffb8\044" +
    "\066\051\065\052\060\053\064\054\057\056\uffb8\062\062" +
    "\063\061\001\002\000\006\004\330\056\uffdd\001\002\000" +
    "\044\004\uffd8\011\077\012\075\015\100\016\106\017\107" +
    "\020\073\021\102\022\104\023\076\024\103\030\110\031" +
    "\072\032\074\042\101\043\111\056\uffd8\001\002\000\004" +
    "\056\327\001\002\000\004\040\uffdf\001\002\000\066\004" +
    "\uffb8\011\uffb8\012\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8" +
    "\021\uffb8\022\uffb8\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\070\034\055\042\uffb8\043\uffb8\044\066\051\065" +
    "\052\060\053\064\054\057\056\uffb8\062\062\063\061\001" +
    "\002\000\044\004\uffd9\011\077\012\075\015\100\016\106" +
    "\017\107\020\073\021\102\022\104\023\076\024\103\030" +
    "\110\031\072\032\074\042\101\043\111\056\uffd9\001\002" +
    "\000\004\025\333\001\002\000\004\055\334\001\002\000" +
    "\004\055\337\001\002\000\004\056\345\001\002\000\006" +
    "\004\uffda\056\uffda\001\002\000\066\004\uffb8\011\uffb8\012" +
    "\056\015\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034" +
    "\055\042\uffb8\043\uffb8\044\066\051\065\052\060\053\064" +
    "\054\057\056\uffb8\062\062\063\061\001\002\000\006\004" +
    "\341\056\uffdc\001\002\000\004\055\337\001\002\000\006" +
    "\004\uffdb\056\uffdb\001\002\000\004\056\344\001\002\000" +
    "\006\004\uffd7\056\uffd7\001\002\000\004\040\uffde\001\002" +
    "\000\004\002\001\001\002\000\064\011\uffb8\012\056\015" +
    "\uffb8\016\uffb8\017\uffb8\020\uffb8\021\uffb8\022\uffb8\023\uffb8" +
    "\024\uffb8\030\uffb8\031\uffb8\032\uffb8\033\070\034\055\042" +
    "\uffb8\043\uffb8\044\066\045\uffb8\051\065\052\060\053\064" +
    "\054\057\062\062\063\061\001\002\000\042\011\077\012" +
    "\075\015\100\016\106\017\107\020\073\021\102\022\104" +
    "\023\076\024\103\030\110\031\072\032\074\042\101\043" +
    "\111\045\351\001\002\000\004\040\uffd4\001\002\000\040" +
    "\002\ufff0\003\ufff0\005\ufff0\010\ufff0\027\ufff0\047\ufff0\051" +
    "\ufff0\066\ufff0\072\ufff0\073\ufff0\075\ufff0\076\ufff0\100\ufff0" +
    "\101\ufff0\102\ufff0\001\002\000\040\002\ufff7\003\ufff7\005" +
    "\ufff7\010\ufff7\027\ufff7\047\ufff7\051\ufff7\066\ufff7\072\ufff7" +
    "\073\ufff7\075\ufff7\076\ufff7\100\ufff7\101\ufff7\102\ufff7\001" +
    "\002\000\040\002\ufff4\003\ufff4\005\ufff4\010\ufff4\027\ufff4" +
    "\047\ufff4\051\ufff4\066\ufff4\072\ufff4\073\ufff4\075\ufff4\076" +
    "\ufff4\100\ufff4\101\ufff4\102\ufff4\001\002\000\040\002\ufff2" +
    "\003\ufff2\005\ufff2\010\ufff2\027\ufff2\047\ufff2\051\ufff2\066" +
    "\ufff2\072\ufff2\073\ufff2\075\ufff2\076\ufff2\100\ufff2\101\ufff2" +
    "\102\ufff2\001\002\000\040\002\uffee\003\uffee\005\uffee\010" +
    "\uffee\027\uffee\047\uffee\051\uffee\066\uffee\072\uffee\073\uffee" +
    "\075\uffee\076\uffee\100\uffee\101\uffee\102\uffee\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\354\000\060\002\013\003\006\004\023\006\014\010" +
    "\044\011\033\012\031\013\041\014\021\016\024\017\030" +
    "\020\032\022\010\023\007\024\045\030\004\031\011\040" +
    "\036\046\042\047\034\050\003\051\035\052\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\054\004\155\006\014\010\044\011\033\012\031\013\041" +
    "\014\021\016\024\017\030\020\032\022\010\023\007\024" +
    "\045\030\004\031\011\040\036\046\042\047\034\050\003" +
    "\051\035\052\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\241\035\066\036\053\037\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\015\050\001" +
    "\001\000\056\003\154\004\023\006\014\010\044\011\033" +
    "\012\031\013\041\014\021\016\024\017\030\020\032\022" +
    "\010\023\007\024\045\030\004\031\011\040\036\046\042" +
    "\047\034\050\003\051\035\052\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\034\070\035\066\036\053" +
    "\037\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\153\035\066\036\053\037\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\005\134\034\136\035\066\036\053\037\062\001" +
    "\001\000\002\001\001\000\012\034\130\035\066\036\053" +
    "\037\062\001\001\000\002\001\001\000\012\034\127\035" +
    "\066\036\053\037\062\001\001\000\012\034\126\035\066" +
    "\036\053\037\062\001\001\000\012\034\125\035\066\036" +
    "\053\037\062\001\001\000\012\034\124\035\066\036\053" +
    "\037\062\001\001\000\012\034\123\035\066\036\053\037" +
    "\062\001\001\000\012\034\122\035\066\036\053\037\062" +
    "\001\001\000\012\034\121\035\066\036\053\037\062\001" +
    "\001\000\012\034\120\035\066\036\053\037\062\001\001" +
    "\000\012\034\117\035\066\036\053\037\062\001\001\000" +
    "\012\034\116\035\066\036\053\037\062\001\001\000\012" +
    "\034\115\035\066\036\053\037\062\001\001\000\002\001" +
    "\001\000\012\034\114\035\066\036\053\037\062\001\001" +
    "\000\012\034\113\035\066\036\053\037\062\001\001\000" +
    "\012\034\112\035\066\036\053\037\062\001\001\000\012" +
    "\034\111\035\066\036\053\037\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\034\142\035\066\036\053\037\062\001" +
    "\001\000\002\001\001\000\012\034\146\035\066\036\053" +
    "\037\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\034\151\035\066" +
    "\036\053\037\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\054\004\155\006\014\010\044" +
    "\011\033\012\031\013\041\014\021\016\024\017\030\020" +
    "\032\022\010\023\007\024\045\030\004\031\011\040\036" +
    "\046\042\047\034\050\003\051\035\052\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\005\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\034\176\035\066\036\053\037\062\001\001\000" +
    "\002\001\001\000\004\015\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\034\231\035\066\036\053\037\062\001" +
    "\001\000\012\034\216\035\066\036\053\037\062\001\001" +
    "\000\012\034\215\035\066\036\053\037\062\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\034\223\035\066\036" +
    "\053\037\062\001\001\000\012\034\222\035\066\036\053" +
    "\037\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\034\226\035\066\036\053\037\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\034\233\035\066\036\053" +
    "\037\062\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\236\035\066\036\053\037\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\025\245\026\246\032\244\033\243\034\250" +
    "\035\066\036\053\037\062\001\001\000\002\001\001\000" +
    "\016\025\261\026\262\034\250\035\066\036\053\037\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\253" +
    "\004\023\006\014\010\044\011\033\012\031\013\041\014" +
    "\021\016\024\017\030\020\032\022\010\023\007\024\045" +
    "\030\004\031\011\040\036\046\042\047\034\050\003\051" +
    "\035\052\020\001\001\000\054\004\155\006\014\010\044" +
    "\011\033\012\031\013\041\014\021\016\024\017\030\020" +
    "\032\022\010\023\007\024\045\030\004\031\011\040\036" +
    "\046\042\047\034\050\003\051\035\052\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\257\004\023" +
    "\006\014\010\044\011\033\012\031\013\041\014\021\016" +
    "\024\017\030\020\032\022\010\023\007\024\045\030\004" +
    "\031\011\040\036\046\042\047\034\050\003\051\035\052" +
    "\020\001\001\000\054\004\155\006\014\010\044\011\033" +
    "\012\031\013\041\014\021\016\024\017\030\020\032\022" +
    "\010\023\007\024\045\030\004\031\011\040\036\046\042" +
    "\047\034\050\003\051\035\052\020\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\266\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\270\035\066\036\053\037\062\001\001" +
    "\000\002\001\001\000\010\012\274\013\272\027\275\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\277\001\001\000\002\001" +
    "\001\000\012\034\301\035\066\036\053\037\062\001\001" +
    "\000\002\001\001\000\012\034\303\035\066\036\053\037" +
    "\062\001\001\000\002\001\001\000\004\015\305\001\001" +
    "\000\002\001\001\000\006\014\310\015\307\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\313\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\034\316\035\066\036\053\037\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\034\324\035\066\036\053\037\062\041\325" +
    "\042\323\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\034\330\035\066" +
    "\036\053\037\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\043\334\044\337\045\335" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\034" +
    "\324\035\066\036\053\037\062\041\342\042\323\001\001" +
    "\000\002\001\001\000\004\045\341\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\347\035\066\036\053\037" +
    "\062\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public String resultado = "";
    public boolean estadograf = false;
    public boolean estadobar = false;
    public int titulobar = 0;
    
    public  String getResultado(){
        return resultado;
    }
    public void syntax_error(Symbol s) {
        System.out.println("Error Sintactico en la Linea " + (s.left) +
                " Columna " + s.right + ". No se esperaba este componente: " + s.value + ".");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception {
        System.out.println("Error síntactico irrecuperable en la Linea " +
                s.left + " Columna " + s.right + ". Componente " + s.value +
                " no reconocido.");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= instrucciones 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // instrucciones ::= instrucciones instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // instrucciones ::= instruccion 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instrucciones",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // instruccion ::= DECLARACION PYC 
            {
              Instruccion RESULT =null;
		int asleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int asright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion as = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = as; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // instruccion ::= ASIGNACION PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // instruccion ::= INC_DECINS PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // instruccion ::= IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // instruccion ::= INSFOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // instruccion ::= BREAK PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT =a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // instruccion ::= CONTINUE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // instruccion ::= MATCHINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // instruccion ::= INSWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // instruccion ::= DOWHILEINS PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // instruccion ::= PRINT PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // instruccion ::= INSVECTOR PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // instruccion ::= INSASIGNVECTOR PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // instruccion ::= INSLISTA PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // instruccion ::= ACCESOLISTA PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // instruccion ::= LISTASSIGN PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // instruccion ::= LISTAPPEND PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // instruccion ::= LISTREMOVE PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // instruccion ::= INSASIGNVECT2D PYC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // instruccion ::= error PYC 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // instruccion ::= error 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instruccion",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // INC_DECINS ::= ID INC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDecIns(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DECINS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // INC_DECINS ::= ID DEC 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDecIns(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INC_DECINS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= MUTACION ID DP TIPO IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(bleft, bright, b.toString(), c.toString(), d, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION ::= MUTACION ID DP TIPO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Declaration(bleft, bright, b.toString(), c.toString(), null, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // ASIGNACION ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assign(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // INSLISTA ::= LIST MENORQ TIPO MAYORQ MENORQ ID MAYORQ IGUAL NEW LIST PARENABRE PARENCIERRA 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSLISTA",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ACCESOLISTA ::= ID PUNTO EXPRESION 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESOLISTA",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LISTAPPEND ::= ID PUNTO APPEND PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAPPEND",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTREMOVE ::= ID PUNTO REMOVE PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTREMOVE",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // INSVECTOR ::= MUTACION ID DP TIPO CORCHABRE CORCHCIERRA IGUAL CORCHABRE LISTAVALORES1 CORCHCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vect(bleft, bright, b.toString(), c.toString(), d, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSVECTOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // INSVECTOR ::= MUTACION ID DP TIPO CORCHABRE CORCHCIERRA CORCHABRE CORCHCIERRA IGUAL CORCHABRE LISTAVALORES2 CORCHCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> d = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vect2D(bleft, bright, b.toString(), c.toString(), d, a.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSVECTOR",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTAVALORES1 ::= EXPRESIONES 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES1",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LISTAVALORES2 ::= EXPRESIONESARRAY 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAVALORES2",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPRESIONESARRAY ::= EXPRESIONESARRAY COMA EXPRESIONARRAY 
            {
              LinkedList<Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONESARRAY",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPRESIONESARRAY ::= EXPRESIONARRAY 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONESARRAY",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESIONES ::= EXPRESIONES COMA EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Object> b = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b;RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESIONES ::= EXPRESION 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Object>();RESULT.add(a);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPRESIONARRAY ::= CORCHABRE LISTAVALORES1 CORCHCIERRA 
            {
              LinkedList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Object> a = (LinkedList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONARRAY",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // INSASIGNVECTOR ::= ID CORCHABRE EXPRESION CORCHCIERRA IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignVect(aleft, aright, a.toString(), b, c ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSASIGNVECTOR",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // INSASIGNVECT2D ::= ID CORCHABRE EXPRESION CORCHCIERRA CORCHABRE EXPRESION CORCHCIERRA IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion d = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignVect2D(aleft, aright, a.toString(), b, c, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSASIGNVECT2D",40, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // PRINT ::= PRINTLN PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Print(aleft, aright, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IF ::= TKIF PARENABRE EXPRESION PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(cleft, cright, a, b, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IF ::= TKIF PARENABRE EXPRESION PARENCIERRA BLOCKINS ELSE BLOCKINS 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(cleft, cright, a, b, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IF ::= TKIF PARENABRE EXPRESION PARENCIERRA BLOCKINS ELSE IF 
            {
              Instruccion RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(cleft, cright, a, b, d); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // MATCHINS ::= MATCH EXPRESION LLAVEABRE BLOCKCASES LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Object> c = (ArrayList<Object>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Match(aleft, aright, b, (ArrayList<Instruccion>) c.get(0),(Instruccion)c.get(1));  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MATCHINS",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BLOCKCASES ::= CASES DEFAULTINS 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Object> lista = new ArrayList<>();lista.add(a); lista.add(b); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKCASES",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BLOCKCASES ::= CASES 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruccion> a = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Object> lista = new ArrayList<>(); lista.add(a); lista.add(null); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKCASES",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // BLOCKCASES ::= DEFAULTINS 
            {
              ArrayList<Object> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 ArrayList<Object> lista = new ArrayList<>(); lista.add(null); lista.add(a); RESULT= lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKCASES",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASES ::= CASES CASE 
            {
              ArrayList<Instruccion> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruccion> b = (ArrayList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		   RESULT = b; RESULT.add((Instruccion)a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASES ::= CASE 
            {
              ArrayList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ArrayList<>(); RESULT.add((Instruccion)a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASE ::= EXPRESION ARROW LLAVEABRE instrucciones LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Case(aleft, aright, a, new BloqueIns(bleft, bright, b)); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DEFAULTINS ::= DEFAULT ARROW LLAVEABRE instrucciones LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BloqueIns(bleft, bright, a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULTINS",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // INSWHILE ::= WHILE PARENABRE EXPRESION PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new While(aleft, aright, b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSWHILE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DOWHILEINS ::= DO BLOCKINS WHILE PARENABRE EXPRESION PARENCIERRA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new DoWhile(aleft, aright, c, b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILEINS",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // INSFOR ::= FOR PARENABRE IDFOR PYC EXPRESION PYC EXPRESIONFOR PARENCIERRA BLOCKINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new For(aleft, aright, b, c, d, (BloqueIns)e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSFOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXPRESIONFOR ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONFOR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXPRESIONFOR ::= INC_DECINS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESIONFOR",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IDFOR ::= ID IGUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Assign(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IDFOR",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // BLOCKINS ::= LLAVEABRE instrucciones LLAVECIERRA 
            {
              Instruccion RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BloqueIns(bleft, bright,a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BLOCKINS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // BREAK ::= TKBREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Break(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONTINUE ::= TKCONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Continue(aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // MUTACION ::= VAR 
            {
              Object RESULT =null;
		int varrleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int varrright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object varr = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = varr; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTACION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // MUTACION ::= CONST 
            {
              Object RESULT =null;
		int constanteleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int constanteright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object constante = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = constante; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTACION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPO ::= CHAR 
            {
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPO ::= DOUBLE 
            {
              Object RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = b; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPO ::= INT 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = c; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPO ::= BOOL 
            {
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = d; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPO ::= TKSTRING 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = e; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPO",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= 
            {
              Expresion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= INCRE_DECRE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXPRESION ::= ARITMETICAS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXPRESION ::= ACCESSARRAYS 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXPRESION ::= EXPRESION IGUALACION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXPRESION ::= EXPRESION DIFERENTE EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXPRESION ::= EXPRESION MENORQ EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXPRESION ::= EXPRESION MAYORQ EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXPRESION ::= EXPRESION MAYORIGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXPRESION ::= EXPRESION MENORIGUAL EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacional(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXPRESION ::= EXPRESION AND EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXPRESION ::= EXPRESION XOR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXPRESION ::= EXPRESION OR EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXPRESION ::= NOT EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logic(aleft, aright, b, a.toString(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXPRESION ::= MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, b, a.toString(), null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXPRESION ::= PARENABRE EXPRESION PARENCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXPRESION ::= PARENABRE TIPO PARENCIERRA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Cast(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // EXPRESION ::= STRING 
            {
              Expresion RESULT =null;
		int strinleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strinright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object strin = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(strinleft, strinright, strin!=null?QuitarComillas.comillas(strin.toString()):QuitarComillas.comillas(null) , Types.STRING); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // EXPRESION ::= ID 
            {
              Expresion RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Id_Acces(idleft, idright, id.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // EXPRESION ::= DECIMAL 
            {
              Expresion RESULT =null;
		int decimalleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int decimalright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object decimal = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(decimalleft, decimalright, decimal, Types.DECIMAL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // EXPRESION ::= ENTERO 
            {
              Expresion RESULT =null;
		int enteroleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int enteroright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object entero = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(enteroleft, enteroright, entero, Types.INT); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // EXPRESION ::= TRUE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, a, Types.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // EXPRESION ::= FALSE 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, a, Types.BOOL); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // EXPRESION ::= TKCHAR 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Primitive(aleft, aright, a, Types.CHAR); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARITMETICAS ::= EXPRESION MODULO EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // ARITMETICAS ::= EXPRESION SUMA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // ARITMETICAS ::= EXPRESION MENOS EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ARITMETICAS ::= EXPRESION MULTIPLICACION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ARITMETICAS ::= EXPRESION DIVISION EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // ARITMETICAS ::= EXPRESION POTENCIA EXPRESION 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expresion a = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Arithmetics(aleft, aright, a, b.toString(), c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // ACCESSARRAYS ::= ID CORCHABRE EXPRESION CORCHCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new VectAcces(aleft, aright, a.toString(), b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESSARRAYS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // ACCESSARRAYS ::= ID CORCHABRE EXPRESION CORCHCIERRA CORCHABRE EXPRESION CORCHCIERRA 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expresion b = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expresion c = (Expresion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Vect2DAcces(aleft, aright, a.toString(), b, c); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESSARRAYS",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // INCRE_DECRE ::= ID INC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDec(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // INCRE_DECRE ::= ID DEC 
            {
              Expresion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IncDec(aleft, aright, a.toString(), b.toString()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCRE_DECRE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
