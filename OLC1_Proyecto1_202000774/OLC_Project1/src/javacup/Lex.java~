// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: src/javacup/Lexer.jflex

package javacup;
import java.io.*;
import java_cup.runtime.*;



@SuppressWarnings("fallthrough")
public class Lex implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;
  public static final int COMMENT = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\1\u0400\266\u0200\10\u0500\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\2\2\22\0\1\1\1\4"+
    "\1\5\2\0\1\6\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\12\21\1\22\1\23"+
    "\1\24\1\25\1\26\2\0\1\27\1\30\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42"+
    "\1\43\1\44\1\45\1\46\1\40\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\3\40\1\55\1\56\1\57\1\60"+
    "\1\61\1\0\1\27\1\62\1\31\1\32\1\33\1\63"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\64"+
    "\1\45\1\46\1\40\1\65\1\50\1\66\1\52\1\53"+
    "\1\54\3\40\1\67\1\70\1\71\7\0\1\3\252\0"+
    "\2\72\115\0\1\73\u01a8\0\2\3\u0100\0\1\74\325\0"+
    "\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\2\1\1\5"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\21\23\1\24\1\1"+
    "\1\25\1\26\1\27\1\30\1\1\1\31\21\1\1\32"+
    "\1\0\1\33\1\0\1\34\1\0\1\35\1\0\1\36"+
    "\1\37\1\40\1\0\1\2\1\0\1\41\1\42\1\43"+
    "\1\44\5\23\1\45\3\23\1\46\2\23\1\0\10\23"+
    "\2\0\1\47\1\46\7\0\1\45\12\0\1\33\5\0"+
    "\1\50\7\23\1\0\1\23\1\51\1\52\1\23\1\0"+
    "\1\23\1\53\1\23\1\0\3\23\1\54\1\23\3\0"+
    "\1\52\10\0\1\51\1\0\1\53\2\0\1\54\1\0"+
    "\1\33\1\0\1\35\2\0\1\2\1\50\1\23\1\55"+
    "\1\23\1\56\2\23\1\0\1\23\2\57\1\23\1\0"+
    "\2\60\2\23\1\0\2\23\1\0\1\61\1\23\3\0"+
    "\1\55\1\0\1\56\4\0\1\61\2\0\1\33\3\0"+
    "\1\2\1\23\2\62\1\63\1\23\1\0\1\63\1\23"+
    "\2\64\1\65\1\23\1\0\2\23\1\0\2\66\3\0"+
    "\1\65\4\0\1\67\1\23\1\0\1\70\1\23\1\0"+
    "\1\71\2\72\1\0\1\67\1\70\1\71\1\23\1\0"+
    "\2\73\1\0\2\74\46\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\75\0\172\0\267\0\364\0\u0131\0\172\0\u016e"+
    "\0\u01ab\0\172\0\172\0\u01e8\0\u0225\0\172\0\u0262\0\172"+
    "\0\u029f\0\u02dc\0\172\0\172\0\u0319\0\u0356\0\u0393\0\u03d0"+
    "\0\u040d\0\u044a\0\u0487\0\u04c4\0\u0501\0\u053e\0\u057b\0\u05b8"+
    "\0\u05f5\0\u0632\0\u066f\0\u06ac\0\u06e9\0\u0726\0\u0763\0\u07a0"+
    "\0\u07dd\0\u081a\0\172\0\172\0\172\0\172\0\u0857\0\172"+
    "\0\u0894\0\u08d1\0\u029f\0\u090e\0\u094b\0\u0988\0\u09c5\0\u0a02"+
    "\0\u0a3f\0\u0a7c\0\u0ab9\0\u0af6\0\u0b33\0\u0b70\0\u0bad\0\u0bea"+
    "\0\u0c27\0\172\0\u0c64\0\u0ca1\0\u0cde\0\172\0\u01ab\0\172"+
    "\0\u0d1b\0\172\0\172\0\172\0\u0d58\0\u0d95\0\u0dd2\0\172"+
    "\0\172\0\172\0\172\0\u0e0f\0\u0e4c\0\u0e89\0\u0ec6\0\u0f03"+
    "\0\u0f40\0\u0f7d\0\u0fba\0\u0ff7\0\u053e\0\u1034\0\u1071\0\u10ae"+
    "\0\u10eb\0\u1128\0\u1165\0\u11a2\0\u11df\0\u121c\0\u1259\0\u1296"+
    "\0\u12d3\0\u1310\0\172\0\172\0\u134d\0\u138a\0\u13c7\0\u1404"+
    "\0\u1441\0\u147e\0\u14bb\0\u14f8\0\u1535\0\u1572\0\u15af\0\u15ec"+
    "\0\u1629\0\u1666\0\u16a3\0\u16e0\0\u171d\0\u175a\0\172\0\u1797"+
    "\0\u17d4\0\u1811\0\u184e\0\u188b\0\u18c8\0\u1905\0\u1942\0\u197f"+
    "\0\u19bc\0\u19f9\0\u1a36\0\u1a73\0\u1ab0\0\u1aed\0\u053e\0\u053e"+
    "\0\u1b2a\0\u1b67\0\u1ba4\0\u053e\0\u1be1\0\u1c1e\0\u1c5b\0\u1c98"+
    "\0\u1cd5\0\u053e\0\u1d12\0\u1d4f\0\u1d8c\0\u1dc9\0\172\0\u1e06"+
    "\0\u1e43\0\u1e80\0\u1ebd\0\u1efa\0\u1f37\0\u1f74\0\u1fb1\0\172"+
    "\0\u1fee\0\172\0\u202b\0\u2068\0\172\0\u20a5\0\u20e2\0\u211f"+
    "\0\u215c\0\u2199\0\u21d6\0\172\0\u2213\0\u2250\0\u053e\0\u228d"+
    "\0\u053e\0\u22ca\0\u2307\0\u2344\0\u2381\0\u053e\0\172\0\u23be"+
    "\0\u23fb\0\u053e\0\172\0\u2438\0\u2475\0\u24b2\0\u24ef\0\u252c"+
    "\0\u2569\0\u053e\0\u25a6\0\u25e3\0\u2620\0\u265d\0\172\0\u269a"+
    "\0\172\0\u26d7\0\u2714\0\u2751\0\u278e\0\172\0\u20e2\0\u27cb"+
    "\0\u1797\0\u2808\0\u215c\0\u2845\0\u2199\0\u2882\0\u053e\0\172"+
    "\0\u053e\0\u28bf\0\u28fc\0\172\0\u2939\0\u053e\0\172\0\u053e"+
    "\0\u2976\0\u29b3\0\u29f0\0\u2a2d\0\u2a6a\0\u053e\0\172\0\u2aa7"+
    "\0\u2ae4\0\u2b21\0\172\0\u2b5e\0\u2b9b\0\u2bd8\0\u2c15\0\u053e"+
    "\0\u2c52\0\u2c8f\0\u053e\0\u2ccc\0\u2d09\0\u053e\0\u053e\0\172"+
    "\0\u2d46\0\172\0\172\0\172\0\u2d83\0\u2dc0\0\u053e\0\172"+
    "\0\u2dfd\0\u053e\0\172\0\u2e3a\0\u2e77\0\u2eb4\0\u2ef1\0\u2f2e"+
    "\0\u2f6b\0\u2fa8\0\u2fe5\0\u3022\0\u305f\0\u309c\0\u30d9\0\u3116"+
    "\0\u3153\0\u3190\0\u31cd\0\u320a\0\u3247\0\u3284\0\u32c1\0\u32fe"+
    "\0\u333b\0\u3378\0\u33b5\0\u33f2\0\u342f\0\u346c\0\u34a9\0\u34e6"+
    "\0\u3523\0\u3560\0\u359d\0\u35da\0\u3617\0\u3654\0\u3691\0\u36ce"+
    "\0\u370b";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\0\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\2\36\1\37\2\36\1\40"+
    "\1\41\1\42\1\36\1\43\1\44\1\45\1\46\1\36"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\31"+
    "\1\35\1\42\1\44\1\46\1\56\1\57\1\60\1\61"+
    "\1\62\2\3\2\4\1\0\14\3\1\63\6\3\1\64"+
    "\1\65\1\66\1\67\1\70\1\71\2\3\1\61\2\3"+
    "\1\72\1\73\1\74\1\3\1\75\1\76\1\62\1\77"+
    "\1\3\1\100\1\101\5\3\1\65\1\71\1\74\1\76"+
    "\1\77\3\3\1\61\1\62\1\3\76\0\2\4\117\0"+
    "\1\102\47\0\5\103\1\104\50\103\1\105\16\103\7\0"+
    "\1\106\65\0\10\107\1\110\45\107\1\111\16\107\13\0"+
    "\1\112\75\0\1\113\76\0\1\114\71\0\1\115\4\0"+
    "\1\116\73\0\1\117\1\0\1\22\100\0\1\120\74\0"+
    "\1\121\1\122\73\0\1\123\70\0\1\36\5\0\17\36"+
    "\1\124\6\36\5\0\5\36\27\0\1\36\5\0\16\36"+
    "\1\125\1\36\1\126\5\36\5\0\3\36\1\126\1\36"+
    "\27\0\1\36\5\0\7\36\1\127\6\36\1\130\7\36"+
    "\5\0\5\36\27\0\1\36\5\0\16\36\1\131\7\36"+
    "\5\0\5\36\27\0\1\36\5\0\13\36\1\132\12\36"+
    "\5\0\5\36\27\0\1\36\5\0\1\133\15\36\1\134"+
    "\7\36\5\0\5\36\27\0\1\36\5\0\26\36\5\0"+
    "\5\36\27\0\1\36\5\0\5\36\1\135\7\36\1\136"+
    "\10\36\5\0\1\36\1\135\1\136\2\36\27\0\1\36"+
    "\5\0\10\36\1\137\15\36\5\0\5\36\3\0\1\140"+
    "\23\0\1\36\5\0\1\141\25\36\5\0\5\36\27\0"+
    "\1\36\5\0\4\36\1\142\21\36\5\0\5\36\27\0"+
    "\1\36\5\0\20\36\1\143\5\36\5\0\3\36\1\143"+
    "\1\36\27\0\1\36\5\0\4\36\1\144\21\36\5\0"+
    "\5\36\27\0\1\36\5\0\22\36\1\145\3\36\5\0"+
    "\4\36\1\145\27\0\1\36\5\0\20\36\1\146\5\36"+
    "\5\0\3\36\1\146\1\36\27\0\1\36\5\0\1\147"+
    "\25\36\5\0\5\36\27\0\1\36\5\0\7\36\1\150"+
    "\16\36\5\0\5\36\66\0\1\151\25\0\1\152\153\0"+
    "\1\153\40\0\1\154\7\0\1\155\16\0\1\154\1\155"+
    "\61\0\1\156\14\0\1\156\54\0\1\157\73\0\1\160"+
    "\1\0\1\161\15\0\1\161\45\0\1\162\6\0\1\163"+
    "\74\0\1\164\71\0\1\165\61\0\1\166\15\0\1\167"+
    "\66\0\1\140\32\0\1\140\31\0\1\170\100\0\1\171"+
    "\110\0\1\172\15\0\1\172\42\0\1\173\110\0\1\174"+
    "\15\0\1\174\36\0\1\175\103\0\1\176\36\0\5\103"+
    "\1\177\50\103\1\105\16\103\5\0\1\177\74\0\1\200"+
    "\2\0\1\200\45\0\1\201\3\0\5\200\6\0\10\202"+
    "\1\110\45\202\1\203\16\202\13\115\1\204\61\115\2\116"+
    "\2\0\71\116\21\0\1\205\74\0\1\36\5\0\17\36"+
    "\1\206\6\36\5\0\5\36\27\0\1\36\5\0\16\36"+
    "\1\207\7\36\5\0\5\36\27\0\1\36\5\0\4\36"+
    "\1\210\21\36\5\0\5\36\27\0\1\36\5\0\1\211"+
    "\25\36\5\0\5\36\27\0\1\36\5\0\15\36\1\212"+
    "\10\36\5\0\2\36\1\212\2\36\27\0\1\36\5\0"+
    "\23\36\1\213\2\36\5\0\5\36\27\0\1\36\5\0"+
    "\21\36\1\214\4\36\5\0\5\36\4\0\1\215\22\0"+
    "\1\36\5\0\13\36\1\216\12\36\5\0\5\36\27\0"+
    "\1\36\5\0\20\36\1\217\5\36\5\0\3\36\1\217"+
    "\1\36\27\0\1\36\5\0\22\36\1\220\3\36\5\0"+
    "\4\36\1\220\27\0\1\36\5\0\21\36\1\221\4\36"+
    "\5\0\5\36\4\0\1\222\51\0\1\222\22\0\1\222"+
    "\22\0\1\36\5\0\22\36\1\223\3\36\5\0\4\36"+
    "\1\223\27\0\1\36\5\0\25\36\1\224\5\0\5\36"+
    "\27\0\1\36\5\0\10\36\1\225\15\36\5\0\5\36"+
    "\3\0\1\226\23\0\1\36\5\0\14\36\1\227\11\36"+
    "\5\0\5\36\27\0\1\36\5\0\20\36\1\230\5\36"+
    "\5\0\3\36\1\230\1\36\27\0\1\36\5\0\23\36"+
    "\1\231\2\36\5\0\5\36\27\0\1\36\5\0\20\36"+
    "\1\232\5\36\5\0\3\36\1\232\1\36\27\0\1\36"+
    "\5\0\10\36\1\233\15\36\5\0\5\36\3\0\1\234"+
    "\61\0\1\235\26\0\1\236\134\0\1\237\14\0\1\237"+
    "\55\0\1\240\15\0\1\240\55\0\1\241\73\0\1\242"+
    "\62\0\1\243\70\0\1\244\111\0\1\245\17\0\1\245"+
    "\62\0\1\246\72\0\1\215\22\0\1\215\43\0\1\247"+
    "\101\0\1\250\15\0\1\250\60\0\1\251\14\0\1\251"+
    "\62\0\1\252\57\0\1\226\32\0\1\226\45\0\1\253"+
    "\103\0\1\254\71\0\1\255\15\0\1\255\46\0\1\234"+
    "\32\0\1\234\2\0\5\200\1\177\50\200\1\256\16\200"+
    "\2\103\2\200\1\103\1\257\50\103\1\260\16\103\10\202"+
    "\1\110\64\202\2\107\2\202\4\107\1\261\64\107\13\262"+
    "\1\263\4\262\1\264\54\262\21\0\1\265\74\0\1\36"+
    "\5\0\4\36\1\266\21\36\5\0\5\36\27\0\1\36"+
    "\5\0\13\36\1\267\12\36\5\0\5\36\27\0\1\36"+
    "\5\0\1\270\25\36\5\0\5\36\27\0\1\36\5\0"+
    "\20\36\1\271\5\36\5\0\3\36\1\271\1\36\27\0"+
    "\1\36\5\0\21\36\1\272\1\273\3\36\5\0\4\36"+
    "\1\273\4\0\1\274\22\0\1\36\5\0\1\36\1\275"+
    "\24\36\5\0\1\275\4\36\27\0\1\36\5\0\4\36"+
    "\1\276\21\36\5\0\5\36\41\0\1\277\62\0\1\36"+
    "\5\0\21\36\1\300\4\36\5\0\5\36\4\0\1\301"+
    "\22\0\1\36\5\0\22\36\1\302\3\36\5\0\4\36"+
    "\1\302\57\0\1\303\14\0\1\303\27\0\1\36\5\0"+
    "\2\36\1\304\23\36\5\0\5\36\27\0\1\36\5\0"+
    "\15\36\1\305\10\36\5\0\2\36\1\305\2\36\52\0"+
    "\1\306\17\0\1\306\31\0\1\36\5\0\16\36\1\307"+
    "\7\36\5\0\5\36\27\0\1\36\5\0\10\36\1\310"+
    "\15\36\5\0\5\36\3\0\1\311\23\0\1\36\5\0"+
    "\4\36\1\312\21\36\5\0\5\36\27\0\1\36\5\0"+
    "\13\36\1\313\12\36\5\0\5\36\50\0\1\314\45\0"+
    "\1\177\136\0\1\315\56\0\1\311\32\0\1\311\35\0"+
    "\1\316\103\0\1\317\61\0\1\320\114\0\1\321\15\0"+
    "\1\321\57\0\1\274\1\322\14\0\1\322\4\0\1\274"+
    "\31\0\1\323\31\0\1\323\62\0\1\301\22\0\1\301"+
    "\32\0\1\324\110\0\1\325\62\0\1\326\46\0\1\200"+
    "\2\0\1\200\45\0\1\200\3\0\5\200\6\0\5\327"+
    "\1\177\50\327\1\330\23\327\1\331\2\327\1\103\45\327"+
    "\1\332\3\327\5\103\6\327\10\333\1\110\45\333\1\334"+
    "\16\333\13\262\1\263\74\262\1\263\4\262\1\335\54\262"+
    "\17\0\1\117\1\0\1\265\74\0\1\36\5\0\15\36"+
    "\1\336\10\36\5\0\2\36\1\336\2\36\27\0\1\36"+
    "\5\0\12\36\1\337\13\36\5\0\5\36\5\0\1\340"+
    "\21\0\1\36\5\0\22\36\1\341\3\36\5\0\4\36"+
    "\1\341\27\0\1\36\5\0\10\36\1\342\15\36\5\0"+
    "\5\36\3\0\1\343\53\0\1\344\14\0\1\344\27\0"+
    "\1\36\5\0\13\36\1\345\12\36\5\0\5\36\27\0"+
    "\1\36\5\0\4\36\1\346\21\36\5\0\5\36\41\0"+
    "\1\347\62\0\1\36\5\0\7\36\1\350\16\36\5\0"+
    "\5\36\27\0\1\36\5\0\22\36\1\351\3\36\5\0"+
    "\4\36\1\351\57\0\1\352\14\0\1\352\27\0\1\36"+
    "\5\0\24\36\1\353\1\36\5\0\5\36\27\0\1\36"+
    "\5\0\15\36\1\354\10\36\5\0\2\36\1\354\2\36"+
    "\52\0\1\355\17\0\1\355\31\0\1\36\5\0\4\36"+
    "\1\356\21\36\5\0\5\36\41\0\1\357\121\0\1\360"+
    "\60\0\1\361\17\0\1\361\51\0\1\340\32\0\1\340"+
    "\37\0\1\343\32\0\1\343\44\0\1\362\70\0\1\363"+
    "\111\0\1\364\77\0\1\365\16\0\5\200\1\177\50\200"+
    "\1\366\16\200\56\0\1\367\37\0\1\36\5\0\3\36"+
    "\1\370\22\36\5\0\5\36\27\0\1\36\5\0\15\36"+
    "\1\371\10\36\5\0\2\36\1\371\2\36\52\0\1\372"+
    "\17\0\1\372\31\0\1\36\5\0\4\36\1\373\21\36"+
    "\5\0\5\36\27\0\1\36\5\0\13\36\1\374\12\36"+
    "\5\0\5\36\50\0\1\375\53\0\1\36\5\0\4\36"+
    "\1\376\21\36\5\0\5\36\27\0\1\36\5\0\6\36"+
    "\1\377\17\36\5\0\5\36\43\0\1\u0100\44\0\1\u0101"+
    "\121\0\1\u0102\75\0\1\u0103\74\0\1\u0104\41\0\2\327"+
    "\2\0\73\327\2\0\1\327\1\103\2\327\1\103\45\327"+
    "\1\103\3\327\5\103\6\327\2\333\2\0\71\333\21\0"+
    "\1\36\5\0\23\36\1\u0105\2\36\5\0\5\36\60\0"+
    "\1\u0106\43\0\1\36\5\0\15\36\1\u0107\10\36\5\0"+
    "\2\36\1\u0107\2\36\52\0\1\u0108\17\0\1\u0108\66\0"+
    "\1\u0109\37\0\1\36\5\0\4\36\1\u010a\21\36\5\0"+
    "\5\36\41\0\1\u010b\117\0\1\u010c\62\0\1\u010d\17\0"+
    "\1\u010d\67\0\1\u010e\105\0\1\u010f\62\0\1\u0110\74\0"+
    "\1\u0111\62\0\1\u0112\17\0\1\u0112\100\0\1\u0113\62\0"+
    "\1\u0114\74\0\1\u0115\74\0\1\u0116\74\0\1\u0117\62\0"+
    "\1\u0118\17\0\1\u0118\100\0\1\u0119\62\0\1\u011a\74\0"+
    "\1\u011b\23\0\1\u011c\74\0\1\u011d\157\0\1\u011e\62\0"+
    "\1\u011f\74\0\1\u0120\74\0\1\u0121\74\0\1\u0122\62\0"+
    "\1\u0123\17\0\1\u0123\100\0\1\u0124\62\0\1\u0125\74\0"+
    "\1\u0126\35\0\1\u0127\132\0\1\u0128\77\0\1\u0129\21\0"+
    "\1\u012a\145\0\1\u012b\74\0\1\u012c\62\0\1\u012d\17\0"+
    "\1\u012d\67\0\1\u012e\27\0\1\u012f\75\0\1\u0130\73\0"+
    "\1\u0131\140\0\1\177\16\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[14152];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\1\11\2\1\2\11\2\1\1\11"+
    "\1\1\1\11\2\1\2\11\26\1\4\11\1\1\1\11"+
    "\21\1\1\11\1\0\1\1\1\0\1\11\1\0\1\11"+
    "\1\0\3\11\1\0\1\1\1\0\4\11\14\1\1\0"+
    "\10\1\2\0\2\11\7\0\1\1\12\0\1\11\5\0"+
    "\10\1\1\0\4\1\1\0\3\1\1\0\5\1\3\0"+
    "\1\11\10\0\1\11\1\0\1\11\2\0\1\11\1\0"+
    "\1\1\1\0\1\1\2\0\1\11\7\1\1\0\2\1"+
    "\1\11\1\1\1\0\1\1\1\11\2\1\1\0\2\1"+
    "\1\0\2\1\3\0\1\11\1\0\1\11\4\0\1\11"+
    "\2\0\1\1\3\0\3\1\1\11\2\1\1\0\1\11"+
    "\2\1\1\11\2\1\1\0\2\1\1\0\1\1\1\11"+
    "\3\0\1\11\4\0\2\1\1\0\2\1\1\0\2\1"+
    "\1\11\1\0\3\11\1\1\1\0\1\1\1\11\1\0"+
    "\1\1\1\11\46\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
	StringBuffer string = new StringBuffer();
	
	private Symbol Symbol(int type){
		return new Symbol(type, yyline, yycolumn);
	}
	private Symbol Symbol(int type, Object value){
		return new Symbol(type, yyline, yycolumn, value);
	}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lex(java.io.Reader in) {
      yyline=1;
    yycolumn=1;
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          {     return Symbol(sym.EOF);
 }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Warning: unrecognized character " + yytext());
            }
          // fall through
          case 61: break;
          case 2:
            { /*Ignore*/
            }
          // fall through
          case 62: break;
          case 3:
            { return new Symbol (sym.NOT, yyline, yycolumn, yytext());
            }
          // fall through
          case 63: break;
          case 4:
            { return new Symbol (sym.MODULO, yyline, yycolumn, yytext());
            }
          // fall through
          case 64: break;
          case 5:
            { return new Symbol (sym.PARENABRE, yyline, yycolumn,yytext());
            }
          // fall through
          case 65: break;
          case 6:
            { return new Symbol (sym.PARENCIERRA, yyline, yycolumn,yytext());
            }
          // fall through
          case 66: break;
          case 7:
            { return new Symbol (sym.MULTIPLICACION, yyline, yycolumn, yytext());
            }
          // fall through
          case 67: break;
          case 8:
            { return new Symbol (sym.SUMA, yyline,yycolumn,yytext());
            }
          // fall through
          case 68: break;
          case 9:
            { return new Symbol (sym.COMA, yyline, yycolumn,yytext());
            }
          // fall through
          case 69: break;
          case 10:
            { return new Symbol (sym.MENOS, yyline,yycolumn,yytext());
            }
          // fall through
          case 70: break;
          case 11:
            { return new Symbol (sym.PUNTO, yyline, yycolumn, yytext());
            }
          // fall through
          case 71: break;
          case 12:
            { return new Symbol (sym.DIVISION, yyline, yycolumn, yytext());
            }
          // fall through
          case 72: break;
          case 13:
            { return new Symbol (sym.ENTERO, yyline, yycolumn, yytext());
            }
          // fall through
          case 73: break;
          case 14:
            { return new Symbol (sym.DP, yyline, yycolumn,yytext());
            }
          // fall through
          case 74: break;
          case 15:
            { return new Symbol (sym.PYC, yyline, yycolumn,yytext());
            }
          // fall through
          case 75: break;
          case 16:
            { return new Symbol (sym.MENORQ, yyline, yycolumn, yytext());
            }
          // fall through
          case 76: break;
          case 17:
            { return new Symbol (sym.IGUAL, yyline,yycolumn,yytext());
            }
          // fall through
          case 77: break;
          case 18:
            { return new Symbol (sym.MAYORQ, yyline, yycolumn, yytext());
            }
          // fall through
          case 78: break;
          case 19:
            { return new Symbol (sym.ID, yyline,yycolumn,yytext());
            }
          // fall through
          case 79: break;
          case 20:
            { return new Symbol (sym.CORCHABRE, yyline, yycolumn,yytext());
            }
          // fall through
          case 80: break;
          case 21:
            { return new Symbol (sym.CORCHCIERRA, yyline, yycolumn,yytext());
            }
          // fall through
          case 81: break;
          case 22:
            { return new Symbol (sym.XOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 82: break;
          case 23:
            { return new Symbol (sym.DEFAULT, yyline, yycolumn, yytext());
            }
          // fall through
          case 83: break;
          case 24:
            { return new Symbol (sym.LLAVEABRE, yyline, yycolumn, yytext());
            }
          // fall through
          case 84: break;
          case 25:
            { return new Symbol (sym.LLAVECIERRA, yyline, yycolumn, yytext());
            }
          // fall through
          case 85: break;
          case 26:
            { return new Symbol (sym.DIFERENTE, yyline, yycolumn, yytext());
            }
          // fall through
          case 86: break;
          case 27:
            { return new Symbol (sym.STRING, yyline, yycolumn,yytext());
            }
          // fall through
          case 87: break;
          case 28:
            { return new Symbol (sym.AND, yyline, yycolumn, yytext());
            }
          // fall through
          case 88: break;
          case 29:
            { return new Symbol (sym.TKCHAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 89: break;
          case 30:
            { return new Symbol (sym.POTENCIA, yyline, yycolumn, yytext());
            }
          // fall through
          case 90: break;
          case 31:
            { return new Symbol (sym.INC, yyline, yycolumn, yytext());
            }
          // fall through
          case 91: break;
          case 32:
            { return new Symbol (sym.DEC, yyline, yycolumn, yytext());
            }
          // fall through
          case 92: break;
          case 33:
            { return new Symbol (sym.MENORIGUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 93: break;
          case 34:
            { return new Symbol (sym.IGUALACION, yyline, yycolumn, yytext());
            }
          // fall through
          case 94: break;
          case 35:
            { return new Symbol (sym.ARROW, yyline, yycolumn, yytext());
            }
          // fall through
          case 95: break;
          case 36:
            { return new Symbol (sym.MAYORIGUAL, yyline, yycolumn, yytext());
            }
          // fall through
          case 96: break;
          case 37:
            { return new Symbol (sym.DO, yyline, yycolumn, yytext());
            }
          // fall through
          case 97: break;
          case 38:
            { return new Symbol (sym.TKIF, yyline, yycolumn, yytext());
            }
          // fall through
          case 98: break;
          case 39:
            { return new Symbol (sym.OR, yyline, yycolumn, yytext());
            }
          // fall through
          case 99: break;
          case 40:
            { return new Symbol (sym.DECIMAL, yyline, yycolumn,yytext());
            }
          // fall through
          case 100: break;
          case 41:
            { return new Symbol (sym.FOR, yyline, yycolumn, yytext());
            }
          // fall through
          case 101: break;
          case 42:
            { return new Symbol (sym.INT, yyline, yycolumn, yytext());
            }
          // fall through
          case 102: break;
          case 43:
            { return new Symbol (sym.NEW, yyline, yycolumn, yytext());
            }
          // fall through
          case 103: break;
          case 44:
            { return new Symbol (sym.VAR, yyline, yycolumn,yytext());
            }
          // fall through
          case 104: break;
          case 45:
            { return new Symbol (sym.BOOL, yyline, yycolumn, yytext());
            }
          // fall through
          case 105: break;
          case 46:
            { return new Symbol (sym.CHAR, yyline, yycolumn, yytext());
            }
          // fall through
          case 106: break;
          case 47:
            { return new Symbol (sym.ELSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 107: break;
          case 48:
            { return new Symbol (sym.LIST, yyline, yycolumn, yytext());
            }
          // fall through
          case 108: break;
          case 49:
            { return new Symbol (sym.TRUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 109: break;
          case 50:
            { return new Symbol (sym.TKBREAK, yyline, yycolumn, yytext());
            }
          // fall through
          case 110: break;
          case 51:
            { return new Symbol (sym.CONST, yyline, yycolumn, yytext());
            }
          // fall through
          case 111: break;
          case 52:
            { return new Symbol (sym.FALSE, yyline, yycolumn, yytext());
            }
          // fall through
          case 112: break;
          case 53:
            { return new Symbol (sym.MATCH, yyline, yycolumn, yytext());
            }
          // fall through
          case 113: break;
          case 54:
            { return new Symbol (sym.WHILE, yyline, yycolumn, yytext());
            }
          // fall through
          case 114: break;
          case 55:
            { return new Symbol (sym.APPEND, yyline, yycolumn, yytext());
            }
          // fall through
          case 115: break;
          case 56:
            { return new Symbol (sym.DOUBLE,yyline, yycolumn,yytext());
            }
          // fall through
          case 116: break;
          case 57:
            { return new Symbol (sym.REMOVE, yyline, yycolumn, yytext());
            }
          // fall through
          case 117: break;
          case 58:
            { return new Symbol (sym.TKSTRING, yyline, yycolumn, yytext());
            }
          // fall through
          case 118: break;
          case 59:
            { return new Symbol (sym.PRINTLN, yyline, yycolumn, yytext());
            }
          // fall through
          case 119: break;
          case 60:
            { return new Symbol (sym.TKCONTINUE, yyline, yycolumn, yytext());
            }
          // fall through
          case 120: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
